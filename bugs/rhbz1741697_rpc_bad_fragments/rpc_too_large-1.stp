# module("sunrpc").statement("svc_tcp_recv_record@net/sunrpc/svcsock.c:988") $iov:struct kvec $serv:struct svc_serv* $want:unsigned int $len:int $rqstp:struct svc_rqst* $svsk:struct svc_sock*

%{
#include <include/linux/in.h>
%}
global hitcount = 0

function tstamp:string(epochsecs:long, nsec:long) %{ /* pure */
	const time_t epochsecs = STAP_ARG_epochsecs;
	unsigned long nsec = STAP_ARG_nsec;
	struct tm gmt;

	time_to_tm(epochsecs, -tz_gmtoff, &gmt);
	snprintf(STAP_RETVALUE, MAXSTRINGLEN, "%04ld-%02d-%02d %02d:%02d:%02d.%06lu",
		gmt.tm_year + 1900, gmt.tm_mon + 1, gmt.tm_mday,
		gmt.tm_hour, gmt.tm_min, gmt.tm_sec, nsec / 1000);
%}
function tstamp_now() {
	s = gettimeofday_ns()
	ns = s % 1000000000
	s = s / 1000000000
	return tstamp(s, ns)
}
function output(msg) {
	tmp_msg = sprintf("%s %s(%d) %s()%s", tstamp_now(), execname(), tid(), ppfunc(), msg) # with timestamp
	printk(3, tmp_msg)
}
function tcp_sk(sock) {
	return &@cast(sock, "struct tcp_sock")
}

probe module("sunrpc").statement("svc_tcp_recv_record@net/sunrpc/svcsock.c+25") {
	hitnum = ++hitcount

	output(sprintf(": %s", $$parms))
	output(sprintf("    len: %d; want: %d", $len, $want))

#	.sk_xprt - svc_xprt
#	.sk_sock - socket *
#	.sk_sk - sock *
#	.sk_reclen - __be32
#	.sk_tcplen - u32
#	.sk_datalen - u32
	output(sprintf("    svsk (struct svc_sock *): %p", $svsk))
	output(sprintf("        .sk_reclen: %d (0x%08x)", ntohl($svsk->sk_reclen),  ntohl($svsk->sk_reclen)))
	output(sprintf("        .sk_tcplen: %d; .sk_datalen: %d", $svsk->sk_tcplen, $svsk->sk_datalen))
	output(sprintf("        .sv_max_mesg: %d", $serv->sv_max_mesg))

	sk_sk = $svsk->sk_sk
	family = sk_sk->__sk_common->skc_family

	/* addresses and ports */
	skc_addr = sk_sk->__sk_common->skc_rcv_saddr
	skc_port = sk_sk->__sk_common->skc_num
	skc_daddr = sk_sk->__sk_common->skc_daddr
	skc_dport = sk_sk->__sk_common->skc_dport

	addr_port = sprintf("%s:%d", format_ipaddr(skc_addr, family), skc_port)
	daddr_dport = sprintf("%s:%d", format_ipaddr(skc_daddr, family), skc_dport)
	output(sprintf("        remote: %s -> local: %s (proto: %s)",
		daddr_dport, addr_port, kernel_string(sk_sk->__sk_common->skc_prot->name)))
	output(sprintf("        .sv_program->pg_name: %s (prog: %d)",
		kernel_string($serv->sv_program->pg_name), $serv->sv_program->pg_prog))

	if (hitnum >= 100) {
		output(sprintf(" hit the probe %d times; exiting", hitnum))
		exit()
	}
}
