#!/bin/bash

# Frank Sorenson <sorenson@redhat.com>, 2024
# initial reproducer by Brian Foster <bfoster@redhat.com>

mp=/mnt/tmp
img=/var/tmp/test.img
fs_mark_logdir=/var/tmp/fs_log.out
dirs1=5 # first-level directories
dirs2=5 # second-level directories

KiB=1024
MiB=$((1024*1024))
bsize=$((4 * KiB))
MINAGSIZE=$((64 * bsize)) # minimum size before a new AG gets created

start_size=$(( 300 * MiB ))
image_size=$(( start_size + MINAGSIZE + (7 * bsize) ))

yesno() {
	local prompt=$1 response
	while [[ 42 ]] ; do
		read -p "$prompt " -N1 response
		echo >&2
		case $response in
			y|Y) echo "yes" ; break ;;
			n|N) echo "no" ; break ;;
		esac
	done
}
dl_build_fs_mark() {
	[[ ! -d fs_mark ]] && {
		echo "fs_mark (https://github.com/josefbacik/fs_mark) is required" >&2
		local dl_build=$(yesno "Download and compile fs_mark? (y/n)")
		[[ $dl_build == "no" ]] && exit

		git clone https://github.com/josefbacik/fs_mark.git 2>&1 ||
			{ echo "failed to clone fs_mark git tree" >&2 ; exit 1 ; }
	}
	( cd fs_mark && make 2>&1 || { echo "failed to compile fs_mark" >&2 ; exit 1 ; } ) || exit 1
	[[ -x fs_mark/fs_mark ]] || exit 1
}
install_fs_mark() {
	local install=$(yesno "Install fs_mark to /usr/local/bin? (y/n)")
	[[ $install == "no" ]] && echo "$(pwd)/fs_mark/fs_mark" && return

	cp fs_mark/fs_mark /usr/local/bin || { echo "failed to copy fs_mark to /usr/local/bin" >&2 ; exit 1 ; }
	echo "/usr/local/bin/fs_mark"
}

if [[ -z $FS_MARK ]] || [[ ! -x $FS_MARK ]] ; then
	FS_MARK=$(which fs_mark 2>&1) || FS_MARK=""
	[[ -z $FS_MARK ]] && {
		[[ ! -x fs_mark/fs_mark ]] && dl_build_fs_mark
		FS_MARK=$(install_fs_mark) || exit 1
	}
fi

while [[ 42 ]] ; do
	out=$(umount -f $mp 2>&1)
	[[ $out =~ "not mounted" ]] && break
	[[ $out =~ "no mount point specified." ]] && break
	[[ $out =~ "target is busy" ]] && echo "unable to unmount $mp ... busy filesystem" && exit 1
done

rm -f $img
truncate -s $image_size $img
mkfs.xfs -dsize=$start_size $img || exit
mkdir -p $mp
mount $img $mp

xfs_io -xc 'resblks 0' $mp	# no reserved blocks
xfs_growfs -d -m 100 $mp	# inode % to 100, and grow the fs if possible

echo "new filesystem geometry:"
xfs_info $mp


interrupted() {
	trap - SIGINT SIGTERM EXIT
	run_time=$(($SECONDS - start_time))
	dmesg | grep -q corrupt && echo "reproduced in $((SECONDS - start_time)) seconds"
	rm -rf $fs_mark_logdir # clean up fs_mark remnants
	exit
}
trap interrupted SIGINT SIGTERM EXIT

# dynamically build the list of directories
paths=$(for i in $(seq 0 $((dirs1 - 1))) ; do echo -n " -d $mp/d$i" ; done)

dmesg -c >/dev/null
rm -rf $fs_mark_logdir
mkdir -p $fs_mark_logdir
start_time=$SECONDS
while [[ 42 ]] ; do
	$FS_MARK -k -F -S 0 -D $dirs2 -N 1000 -s 0 -p 16 -l $fs_mark_logdir/fs_log.txt $paths
	dmesg | grep corrupt -A1 && break

	## not reproduced... delete something and restart
	dir1=$(cd $mp && ls -1fd * | sort -R | head -n1)
	dir2=$(cd $mp/$dir1 && ls -1fd * | sort -R | head -n1)

	echo "run time $((SECONDS - start_time)) seconds - deleting $mp/$dir1/$dir2"
	rm -rf $mp/$dir1/$dir2
done
