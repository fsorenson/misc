function tstamp:string(epochns:long) %{ /* pure */
	u64 nsec = STAP_ARG_epochns;
	time_t epochsec = nsec / 1000000000;
	struct tm gmt;

	nsec = nsec % 1000000000;

	time_to_tm(epochsec, -tz_gmtoff, &gmt);
	snprintf(STAP_RETVALUE, MAXSTRINGLEN, "%04ld-%02d-%02d %02d:%02d:%02d.%09llu",
		gmt.tm_year + 1900, gmt.tm_mon + 1, gmt.tm_mday,
		gmt.tm_hour, gmt.tm_min, gmt.tm_sec, nsec);
%}

global encode_dirent_names[30]
# module("sunrpc").function("xdr_truncate_encode@net/sunrpc/xdr.c:602") $xdr:struct xdr_stream* $len:size_t
probe module("nfsd").function("nfsd4_encode_dirent") {
	encode_dirent_names[pid()] = substr(kernel_string_n($name, $namlen), 0, $namlen)
}

# module("sunrpc").function("xdr_truncate_encode@net/sunrpc/xdr.c:602") $xdr:struct xdr_stream* $len:size_t
# probe module("sunrpc").function("xdr_truncate_encode").return, module("sunrpc").function("xdr_commit_encode").return {
probe module("sunrpc").function("xdr_truncate_encode").return {
	dirent_name = encode_dirent_names[pid()]

	entry_page_ptr = @entry($xdr->page_ptr)
	xdr = &@cast(@entry($xdr), "struct xdr_stream")
	if (entry_page_ptr != xdr->page_ptr) {
		if ((@entry($len) / 4096) == (xdr->buf->len / 4096)) {
			printf("%s: page_ptr fixup for missing '%s' while truncating from %d to %d\n",
				tstamp(gettimeofday_ns()), dirent_name, @entry($xdr->buf->len), @entry($len))
			xdr->page_ptr = entry_page_ptr
			delete encode_dirent_names[pid()]
		} else {
			printf("%s: not adjusting page_ptr fixup for '%s' while truncating from %d to %d\n",
				tstamp(gettimeofday_ns()), dirent_name, @entry($xdr->buf->len), @entry($len))
		}
	} else {
		printf("%s: truncated from %d to %d for '%s'\n", tstamp(gettimeofday_ns()),
			@entry($xdr->buf->len), @entry($len), dirent_name)
	}
}

