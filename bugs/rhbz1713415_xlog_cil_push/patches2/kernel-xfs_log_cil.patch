--- a/fs/xfs/xfs_linux.h	2019-08-05 18:13:19.127257914 -0400
+++ b/fs/xfs/xfs_linux.h	2019-08-06 09:26:53.711346822 -0400
@@ -289,4 +289,28 @@
 #define XFS_IS_REALTIME_INODE(ip) (0)
 #endif
 
+#define DEFAULT_CIL_CYCLES_TO_BURN 10
+#define DEFAULT_CIL_BURN_DIVIDER 2
+extern unsigned long cil_burn_divider;
+
+extern unsigned long cil_cycles_to_burn_list_del1;
+extern unsigned long cil_cycles_to_burn_list_del2;
+
+extern unsigned long cil_cycles_to_burn_list_del_entry1;
+extern unsigned long cil_cycles_to_burn_list_del_entry2;
+extern unsigned long cil_cycles_to_burn_list_del_entry3;
+extern unsigned long cil_cycles_to_burn_list_del_entry4;
+
+extern unsigned long cil_cycles_to_burn_list_add1;
+extern unsigned long cil_cycles_to_burn_list_add2;
+extern unsigned long cil_cycles_to_burn_list_add3;
+extern unsigned long cil_cycles_to_burn_list_add4;
+
+extern unsigned long cil_cycles_to_burn_list_splice1;
+extern unsigned long cil_cycles_to_burn_list_splice2;
+extern unsigned long cil_cycles_to_burn_list_splice3;
+extern unsigned long cil_cycles_to_burn_list_splice4;
+extern unsigned long cil_cycles_to_burn_list_splice5;
+extern unsigned long cil_cycles_to_burn_list_splice6;
+
 #endif /* __XFS_LINUX__ */
--- a/fs/xfs/xfs_log_cil.c	2019-08-05 18:13:19.130257956 -0400
+++ b/fs/xfs/xfs_log_cil.c	2019-08-06 09:27:19.827711394 -0400
@@ -31,6 +31,150 @@
 #include "xfs_log.h"
 #include "xfs_log_priv.h"
 
+
+unsigned long cil_burn_divider = DEFAULT_CIL_BURN_DIVIDER;
+
+unsigned long cil_cycles_to_burn_list_del1 = DEFAULT_CIL_CYCLES_TO_BURN;
+unsigned long cil_cycles_to_burn_list_del2 = DEFAULT_CIL_CYCLES_TO_BURN;
+
+unsigned long cil_cycles_to_burn_list_del_entry1 = DEFAULT_CIL_CYCLES_TO_BURN;
+unsigned long cil_cycles_to_burn_list_del_entry2 = DEFAULT_CIL_CYCLES_TO_BURN;
+unsigned long cil_cycles_to_burn_list_del_entry3 = DEFAULT_CIL_CYCLES_TO_BURN;
+unsigned long cil_cycles_to_burn_list_del_entry4 = DEFAULT_CIL_CYCLES_TO_BURN;
+
+unsigned long cil_cycles_to_burn_list_add1 = DEFAULT_CIL_CYCLES_TO_BURN;
+unsigned long cil_cycles_to_burn_list_add2 = DEFAULT_CIL_CYCLES_TO_BURN;
+unsigned long cil_cycles_to_burn_list_add3 = DEFAULT_CIL_CYCLES_TO_BURN;
+unsigned long cil_cycles_to_burn_list_add4 = DEFAULT_CIL_CYCLES_TO_BURN;
+
+unsigned long cil_cycles_to_burn_list_splice1 = DEFAULT_CIL_CYCLES_TO_BURN;
+unsigned long cil_cycles_to_burn_list_splice2 = DEFAULT_CIL_CYCLES_TO_BURN;
+unsigned long cil_cycles_to_burn_list_splice3 = DEFAULT_CIL_CYCLES_TO_BURN;
+unsigned long cil_cycles_to_burn_list_splice4 = DEFAULT_CIL_CYCLES_TO_BURN;
+unsigned long cil_cycles_to_burn_list_splice5 = DEFAULT_CIL_CYCLES_TO_BURN;
+unsigned long cil_cycles_to_burn_list_splice6 = DEFAULT_CIL_CYCLES_TO_BURN;
+
+static void cil_burn_cycles(unsigned long loops) {
+	unsigned long divider = cil_burn_divider;
+	if (divider && loops && (current_pid() % divider == 0))
+		while (loops--)
+			nop();
+}
+
+static inline void __cil_list_del(struct list_head * prev, struct list_head * next) {
+	cil_burn_cycles(cil_cycles_to_burn_list_del1);
+	next->prev = prev;
+	cil_burn_cycles(cil_cycles_to_burn_list_del2);
+	prev->next = next;
+}
+
+/*
+	slow down some list operations
+*/
+void __cil_list_del_entry(struct list_head *entry)
+{
+	struct list_head *prev, *next;
+
+	cil_burn_cycles(cil_cycles_to_burn_list_del_entry1);
+	prev = entry->prev;
+	cil_burn_cycles(cil_cycles_to_burn_list_del_entry2);
+	next = entry->next;
+	cil_burn_cycles(cil_cycles_to_burn_list_del_entry3);
+
+	if (WARN(next == LIST_POISON1,
+		"list_del corruption, %p->next is LIST_POISON1 (%p)\n",
+		entry, LIST_POISON1) ||
+	WARN(prev == LIST_POISON2,
+		"list_del corruption, %p->prev is LIST_POISON2 (%p)\n",
+		entry, LIST_POISON2) ||
+	WARN(prev->next != entry,
+		"list_del corruption. prev->next should be %p, "
+		"but was %p; prev: %p, next: %p\n", entry, prev->next, prev, next) ||
+	WARN(next->prev != entry,
+		"list_del corruption. next->prev should be %p, "
+		"but was %p; prev: %p, next: %p\n", entry, next->prev, prev, next))
+		return;
+
+	__cil_list_del(prev, next);
+}
+void cil_list_del(struct list_head *entry) {
+	__cil_list_del_entry(entry);
+}
+static inline void __cil_list_add(struct list_head *new,
+				struct list_head *prev,
+				struct list_head *next) {
+
+	WARN(next->prev != prev,
+		"list_add corruption. next->prev should be "
+		"prev (%p), but was %p. (next=%p).\n",
+		prev, next->prev, next);
+	WARN(prev->next != next,
+		"list_add corruption. prev->next should be "
+		"next (%p), but was %p. (prev=%p).\n",
+		next, prev->next, prev);
+	WARN(new == prev || new == next,
+		"list_add double add: new=%p, prev=%p, next=%p.\n",
+		new, prev, next);
+
+	cil_burn_cycles(cil_cycles_to_burn_list_add1);
+	next->prev = new;
+	cil_burn_cycles(cil_cycles_to_burn_list_add2);
+	new->next = next;
+	cil_burn_cycles(cil_cycles_to_burn_list_add3);
+	new->prev = prev;
+	cil_burn_cycles(cil_cycles_to_burn_list_add4);
+	prev->next = new;
+}
+static inline void cil_list_add(struct list_head *new, struct list_head *head) {
+	__cil_list_add(new, head, head->next);
+}
+
+static inline void cil_list_add_tail(struct list_head *new, struct list_head *head) {
+	__cil_list_add(new, head->prev, head);
+}
+
+static inline void cil_list_move_tail(struct list_head *list,
+				struct list_head *head)
+{
+	__cil_list_del_entry(list);
+	cil_list_add_tail(list, head);
+}
+static inline void __cil_list_splice(const struct list_head *list,
+				struct list_head *prev,
+				struct list_head *next)
+{
+	struct list_head *first, *last;
+
+	cil_burn_cycles(cil_cycles_to_burn_list_splice1);
+	first = list->next;
+	cil_burn_cycles(cil_cycles_to_burn_list_splice2);
+	last = list->prev;
+
+	cil_burn_cycles(cil_cycles_to_burn_list_splice3);
+	first->prev = prev;
+	cil_burn_cycles(cil_cycles_to_burn_list_splice4);
+	prev->next = first;
+
+	cil_burn_cycles(cil_cycles_to_burn_list_splice5);
+	last->next = next;
+	cil_burn_cycles(cil_cycles_to_burn_list_splice6);
+	next->prev = last;
+}
+
+static inline void cil_list_splice_init(struct list_head *list,
+					struct list_head *head) {
+	if (!list_empty(list)) {
+		__cil_list_splice(list, head, head->next);
+		INIT_LIST_HEAD(list);
+	}
+}
+#define cil_list_first_entry(ptr, type, member) \
+	list_entry((ptr)->next, type, member)
+static inline void cil_list_del_init(struct list_head *entry) {
+	__cil_list_del_entry(entry);
+	INIT_LIST_HEAD(entry);
+}
+
 /*
  * Allocate a new ticket. Failing to get a new ticket makes it really hard to
  * recover, so we don't allow failure here. Also, we allocate in a context that
@@ -426,7 +570,7 @@
 
 	/* attach the transaction to the CIL if it has any busy extents */
 	if (!list_empty(&tp->t_busy))
-		list_splice_init(&tp->t_busy, &ctx->busy_extents);
+		cil_list_splice_init(&tp->t_busy, &ctx->busy_extents);
 
 	/*
 	 * Now transfer enough transaction reservation to the context ticket
@@ -489,7 +633,7 @@
 		 * an item that is already the only item in the CIL.
 		 */
 		if (!list_is_last(&lip->li_cil, &cil->xc_cil))
-			list_move_tail(&lip->li_cil, &cil->xc_cil);
+			cil_list_move_tail(&lip->li_cil, &cil->xc_cil);
 	}
 
 	spin_unlock(&cil->xc_cil_lock);
@@ -540,7 +684,7 @@
 	spin_lock(&ctx->cil->xc_push_lock);
 	if (abort)
 		wake_up_all(&ctx->cil->xc_commit_wait);
-	list_del(&ctx->committing);
+	cil_list_del(&ctx->committing);
 	spin_unlock(&ctx->cil->xc_push_lock);
 
 	xlog_cil_free_logvec(ctx->lv_chain);
@@ -642,7 +786,7 @@
 	 * sequence may fully commit between the attempts the wait makes to wait
 	 * on the commit sequence.
 	 */
-	list_add(&ctx->committing, &cil->xc_committing);
+	cil_list_add(&ctx->committing, &cil->xc_committing);
 	spin_unlock(&cil->xc_push_lock);
 
 	/*
@@ -656,9 +800,9 @@
 	while (!list_empty(&cil->xc_cil)) {
 		struct xfs_log_item	*item;
 
-		item = list_first_entry(&cil->xc_cil,
+		item = cil_list_first_entry(&cil->xc_cil,
 					struct xfs_log_item, li_cil);
-		list_del_init(&item->li_cil);
+		cil_list_del_init(&item->li_cil);
 		if (!ctx->lv_chain)
 			ctx->lv_chain = item->li_lv;
 		else
--- a/fs/xfs/xfs_super.c	2019-08-05 18:13:19.133257998 -0400
+++ b/fs/xfs/xfs_super.c	2019-08-06 09:35:13.726342644 -0400
@@ -57,6 +57,7 @@
 #include <linux/kthread.h>
 #include <linux/freezer.h>
 #include <linux/parser.h>
+#include <linux/moduleparam.h>
 
 static const struct super_operations xfs_super_operations;
 struct bio_set *xfs_ioend_bioset;
@@ -2128,6 +2129,64 @@
 	xfs_uuid_table_free();
 }
 
+module_param_named(cil_burn_divider, cil_burn_divider, ulong, 0644);
+MODULE_PARM_DESC(cil_burn_divider, "PID divider to determine whether the cil-related "
+		"list-related functions will burn cycles (burn cycles if "
+		"(<PID> %% cil_burn_divider) == 1; disable entirely with cil_burn_divider=0;  (default: "
+		__stringify(DEFAULT_CIL_BURN_DIVIDER) ")");
+
+module_param_named(cil_cycles_to_burn_list_del1, cil_cycles_to_burn_list_del1, ulong, 0644);
+MODULE_PARM_DESC(cil_cycles_to_burn_list_del1, "Number of cycles to burn at location 1 in __cil_list_del (default: "
+		__stringify(DEFAULT_CIL_CYCLES_TO_BURN) ")");
+module_param_named(cil_cycles_to_burn_list_del2, cil_cycles_to_burn_list_del2, ulong, 0644);
+MODULE_PARM_DESC(cil_cycles_to_burn_list_del2, "Number of cycles to burn at location 2 in __cil_list_del (default: "
+		__stringify(DEFAULT_CIL_CYCLES_TO_BURN) ")");
+
+module_param_named(cil_cycles_to_burn_list_del_entry1, cil_cycles_to_burn_list_del_entry1, ulong, 0644);
+MODULE_PARM_DESC(cil_cycles_to_burn_list_del_entry1, "Number of cycles to burn at location 1 in __cil_list_del_entry (default: "
+		__stringify(DEFAULT_CIL_CYCLES_TO_BURN) ")");
+module_param_named(cil_cycles_to_burn_list_del_entry2, cil_cycles_to_burn_list_del_entry2, ulong, 0644);
+MODULE_PARM_DESC(cil_cycles_to_burn_list_del_entry2, "Number of cycles to burn at location 2 in __cil_list_del_entry (default: "
+		__stringify(DEFAULT_CIL_CYCLES_TO_BURN) ")");
+module_param_named(cil_cycles_to_burn_list_del_entry3, cil_cycles_to_burn_list_del_entry3, ulong, 0644);
+MODULE_PARM_DESC(cil_cycles_to_burn_list_del_entry3, "Number of cycles to burn at location 3 in __cil_list_del_entry (default: "
+		__stringify(DEFAULT_CIL_CYCLES_TO_BURN) ")");
+module_param_named(cil_cycles_to_burn_list_del_entry4, cil_cycles_to_burn_list_del_entry4, ulong, 0644);
+MODULE_PARM_DESC(cil_cycles_to_burn_list_del_entry4, "Number of cycles to burn at location 4 in __cil_list_del_entry (default: "
+		__stringify(DEFAULT_CIL_CYCLES_TO_BURN) ")");
+
+module_param_named(cil_cycles_to_burn_list_add1, cil_cycles_to_burn_list_add1, ulong, 0644);
+MODULE_PARM_DESC(cil_cycles_to_burn_list_add1, "Number of cycles to burn at location 1 in __cil_list_add (default: "
+		__stringify(DEFAULT_CIL_CYCLES_TO_BURN) ")");
+module_param_named(cil_cycles_to_burn_list_add2, cil_cycles_to_burn_list_add2, ulong, 0644);
+MODULE_PARM_DESC(cil_cycles_to_burn_list_add2, "Number of cycles to burn at location 2 in __cil_list_add (default: "
+		__stringify(DEFAULT_CIL_CYCLES_TO_BURN) ")");
+module_param_named(cil_cycles_to_burn_list_add3, cil_cycles_to_burn_list_add3, ulong, 0644);
+MODULE_PARM_DESC(cil_cycles_to_burn_list_add3, "Number of cycles to burn at location 3 in __cil_list_add (default: "
+		__stringify(DEFAULT_CIL_CYCLES_TO_BURN) ")");
+module_param_named(cil_cycles_to_burn_list_add4, cil_cycles_to_burn_list_add4, ulong, 0644);
+MODULE_PARM_DESC(cil_cycles_to_burn_list_add4, "Number of cycles to burn at location 4 in __cil_list_add (default: "
+		__stringify(DEFAULT_CIL_CYCLES_TO_BURN) ")");
+
+module_param_named(cil_cycles_to_burn_list_splice1, cil_cycles_to_burn_list_splice1, ulong, 0644);
+MODULE_PARM_DESC(cil_cycles_to_burn_list_splice1, "Number of cycles to burn at location 1 in __cil_list_splice (default: "
+		__stringify(DEFAULT_CIL_CYCLES_TO_BURN) ")");
+module_param_named(cil_cycles_to_burn_list_splice2, cil_cycles_to_burn_list_splice2, ulong, 0644);
+MODULE_PARM_DESC(cil_cycles_to_burn_list_splice2, "Number of cycles to burn at location 2 in __cil_list_splice (default: "
+		__stringify(DEFAULT_CIL_CYCLES_TO_BURN) ")");
+module_param_named(cil_cycles_to_burn_list_splice3, cil_cycles_to_burn_list_splice3, ulong, 0644);
+MODULE_PARM_DESC(cil_cycles_to_burn_list_splice3, "Number of cycles to burn at location 3 in __cil_list_splice (default: "
+		__stringify(DEFAULT_CIL_CYCLES_TO_BURN) ")");
+module_param_named(cil_cycles_to_burn_list_splice4, cil_cycles_to_burn_list_splice4, ulong, 0644);
+MODULE_PARM_DESC(cil_cycles_to_burn_list_splice4, "Number of cycles to burn at location 4 in __cil_list_splice (default: "
+		__stringify(DEFAULT_CIL_CYCLES_TO_BURN) ")");
+module_param_named(cil_cycles_to_burn_list_splice5, cil_cycles_to_burn_list_splice5, ulong, 0644);
+MODULE_PARM_DESC(cil_cycles_to_burn_list_splice5, "Number of cycles to burn at location 5 in __cil_list_splice (default: "
+		__stringify(DEFAULT_CIL_CYCLES_TO_BURN) ")");
+module_param_named(cil_cycles_to_burn_list_splice6, cil_cycles_to_burn_list_splice6, ulong, 0644);
+MODULE_PARM_DESC(cil_cycles_to_burn_list_splice6, "Number of cycles to burn at location 6 in __cil_list_splice (default: "
+		__stringify(DEFAULT_CIL_CYCLES_TO_BURN) ")");
+
 module_init(init_xfs_fs);
 module_exit(exit_xfs_fs);
 
