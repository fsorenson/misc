#!/usr/bin/perl -w

# Frank Sorenson <sorenson@redhat.com>, 2018

# script to interpret nfs capabilities value from /proc/self/mountstats

use strict;
use warnings;

use Data::Dumper;
use Scalar::Util qw(looks_like_number);

# TODO: convert to perl
# grep -r '^#define NFS_CAP' include/linux/nfs_fs_sb.h | awk '{printf "\t%d => \"%s\",\n", int($5),$2}' >> /var/tmp/nfs_caps.pl
my %cap_defs = (
	0 => "NFS_CAP_READDIRPLUS",
	1 => "NFS_CAP_HARDLINKS",
	2 => "NFS_CAP_SYMLINKS",
	3 => "NFS_CAP_ACLS",
	4 => "NFS_CAP_ATOMIC_OPEN",
	6 => "NFS_CAP_FILEID",
	7 => "NFS_CAP_MODE",
	8 => "NFS_CAP_NLINK",
	9 => "NFS_CAP_OWNER",
	10 => "NFS_CAP_OWNER_GROUP",
	11 => "NFS_CAP_ATIME",
	12 => "NFS_CAP_CTIME",
	13 => "NFS_CAP_MTIME",
	14 => "NFS_CAP_POSIX_LOCK",
	15 => "NFS_CAP_UIDGID_NOMAP",
	16 => "NFS_CAP_STATEID_NFSV41",
	17 => "NFS_CAP_ATOMIC_OPEN_V1",
	18 => "NFS_CAP_SECURITY_LABEL",
	19 => "NFS_CAP_SEEK",
	20 => "NFS_CAP_ALLOCATE",
	21 => "NFS_CAP_DEALLOCATE",
	22 => "NFS_CAP_LAYOUTSTATS",
	23 => "NFS_CAP_CLONE",
	24 => "NFS_CAP_COPY",
	25 => "NFS_CAP_OFFLOAD_CANCEL",
	26 => "NFS_CAP_LAYOUTERROR",
	27 => "NFS_CAP_COPY_NOTIFY",
	28 => "NFS_CAP_XATTR",
	29 => "NFS_CAP_READ_PLUS",
	30 => "NFS_CAP_FS_LOCATIONS",
	31 => "NFS_CAP_MOVEABLE",
);

# see RFC 7531 for nfs v4.0 definitions
# see RFC 8881 for nfs v4.1 definitions
# see RFC 7862 for nfs v4.2 definitions
#
#
# TODO: convert the script to perl
# $ awk 'BEGIN{word=-1} { if ($1=="#define" && substr($2,0, 11) == "FATTR4_WORD"){ this_word=int(substr($2, 12, 1)) ; if (word != this_word && word != -1) {printf("};\n\n")} ; if (word != this_word) {word = this_word ; printf("my %%nfs4_cap_word%d = (\n", this_word)} ; printf "\tword: %d, this_word: %d, %d => \"%s\",\n", word, this_word, int($5), $2}} END{printf("};\n\n")}' ../../include/linux/nfs4.h 
# awk -f gen_caps.awk include/linux/nfs4.h
my %nfs4_cap_word0 = (
	0 => "SUPPORTED_ATTRS", # RFC 7531 section 2
	1 => "TYPE", # RFC 7531 section 2
	2 => "FH_EXPIRE_TYPE", # RFC 7531 section 2
	3 => "CHANGE", # RFC 7531 section 2
	4 => "SIZE", # RFC 7531 section 2
	5 => "LINK_SUPPORT", # RFC 7531 section 2
	6 => "SYMLINK_SUPPORT", # RFC 7531 section 2
	7 => "NAMED_ATTR", # RFC 7531 section 2
	8 => "FSID", # RFC 7531 section 2
	9 => "UNIQUE_HANDLES", # RFC 7531 section 2
	10 => "LEASE_TIME", # RFC 7531 section 2
	11 => "RDATTR_ERROR", # RFC 7531 section 2
	12 => "ACL", # RFC 7531 section 2
	13 => "ACLSUPPORT", # RFC 7531 section 2
	14 => "ARCHIVE", # RFC 7531 section 2
	15 => "CANSETTIME", # RFC 7531 section 2
	16 => "CASE_INSENSITIVE", # RFC 7531 section 2
	17 => "CASE_PRESERVING", # RFC 7531 section 2
	18 => "CHOWN_RESTRICTED", # RFC 7531 section 2
	19 => "FILEHANDLE", # RFC 7531 section 2
	20 => "FILEID", # RFC 7531 section 2
	21 => "FILES_AVAIL", # RFC 7531 section 2
	22 => "FILES_FREE", # RFC 7531 section 2
	23 => "FILES_TOTAL", # RFC 7531 section 2
	24 => "FS_LOCATIONS", # RFC 7531 section 2
	25 => "HIDDEN", # RFC 7531 section 2
	26 => "HOMOGENEOUS", # RFC 7531 section 2
	27 => "MAXFILESIZE", # RFC 7531 section 2
	28 => "MAXLINK", # RFC 7531 section 2
	29 => "MAXNAME", # RFC 7531 section 2
	30 => "MAXREAD", # RFC 7531 section 2
	31 => "MAXWRITE", # RFC 7531 section 2
);
my %nfs4_cap_word1 = (
	0 => "MIMETYPE", # RFC 7531 section 2
	1 => "MODE", # RFC 7531 section 2
	2 => "NO_TRUNC", # RFC 7531 section 2
	3 => "NUMLINKS", # RFC 7531 section 2
	4 => "OWNER", # RFC 7531 section 2
	5 => "OWNER_GROUP", # RFC 7531 section 2
	6 => "QUOTA_AVAIL_HARD", # RFC 7531 section 2
	7 => "QUOTA_AVAIL_SOFT", # RFC 7531 section 2
	8 => "QUOTA_USED", # RFC 7531 section 2
	9 => "RAWDEV", # RFC 7531 section 2
	10 => "SPACE_AVAIL", # RFC 7531 section 2
	11 => "SPACE_FREE", # RFC 7531 section 2
	12 => "SPACE_TOTAL", # RFC 7531 section 2
	13 => "SPACE_USED", # RFC 7531 section 2
	14 => "SYSTEM", # RFC 7531 section 2
	15 => "TIME_ACCESS", # RFC 7531 section 2
	16 => "TIME_ACCESS_SET", # RFC 7531 section 2
	17 => "TIME_BACKUP", # RFC 7531 section 2
	18 => "TIME_CREATE", # RFC 7531 section 2
	19 => "TIME_DELTA", # RFC 7531 section 2
	20 => "TIME_METADATA", # RFC 7531 section 2
	21 => "TIME_MODIFY", # RFC 7531 section 2
	22 => "TIME_MODIFY_SET", # RFC 7531 section 2
	23 => "MOUNTED_ON_FILEID", # RFC 7531 section 2
	24 => "DIR_NOTIF_DELAY", # RFC 5662 section 2
	25 => "DIRENT_NOTIF_DELAY", # RFC 5662 section 2
	26 => "DACL", # RFC 5662 section 2
	27 => "SACL", # RFC 5662 section 2
	28 => "CHANGE_POLICY", # RFC 5662 section 2
	29 => "FS_STATUS", # RFC 5662 section 2
	30 => "FS_LAYOUT_HINT", # RFC 5662 section 2
	31 => "FS_LAYOUT_TYPES", # RFC 5662 section 2
);
my %nfs4_cap_word2 = (
	0 => "LAYOUT_TYPES", # RFC 5662 section 2
	1 => "LAYOUT_BLKSIZE", # RFC 5662 section 2
	2 => "LAYOUT_ALIGNMENT", # RFC 5662 section 2
	3 => "FS_LOCATIONS_INFO", # RFC 5662 section 2
	4 => "MDSTHRESHOLD", # RFC 5662 section 2
	5 => "RETENTION_GET", # RFC 5662 section 2
	6 => "RETENTION_SET", # RFC 5662 section 2
	7 => "RETENTEVT_GET", # RFC 5662 section 2
	8 => "RETENTEVT_SET", # RFC 5662 section 2
	9 => "RETENTION_HOLD", # RFC 5662 section 2
	10 => "MODE_SET_MASKED", # RFC 5662 section 2
	11 => "SUPPATTR_EXCLCREAT", # RFC 5662 section 2
	12 => "FS_CHARSET_CAP", # RFC 5662 section 2
	13 => "CLONE_BLKSIZE", # RFC 7863 section 2
	14 => "SPACE_FREED", # RFC 7863 section 2
	15 => "CHANGE_ATTR_TYPE", # RFC 7863 section 2
	16 => "SECURITY_LABEL", # RFC 7863 section 2
	17 => "MODE_UMASK", # RFC 8275 section 5
	18 => "XATTR_SUPPORT", # RFC 8276 section 8.6

	20 => "TIME_DELEG_ACCESS", # draft-ietf-nfsv4-delstid-08 section 5.2
	21 => "TIME_DELEG_MOTIFY", # draft-ietf-nfsv4-delstid-08 section 5.2
	22 => "OPEN_ARGUMENTS", # linux kernel source
);

sub get_caps {
	my $caps = shift;
	my @ret = ();

	foreach my $key (sort keys %cap_defs) {
		push @ret, substr($cap_defs{$key}, 4) if ($caps & (1 << $key));
	}
	return join " | ", @ret;
}
sub decode_nfsv4_word {
	my $cap_val = shift;
	my $word = shift;
	my @ret = ();

	if ($word eq 0) {
		foreach my $key (sort keys %nfs4_cap_word0) {
			push @ret, $nfs4_cap_word0{$key} if ($cap_val & (1 << $key));
		}
	} elsif ($word eq 1) {
		foreach my $key (sort keys %nfs4_cap_word1) {
			push @ret, $nfs4_cap_word1{$key} if ($cap_val & (1 << $key));
		}
	} elsif ($word eq 2) {
		foreach my $key (sort keys %nfs4_cap_word2) {
			push @ret, $nfs4_cap_word2{$key} if ($cap_val & (1 << $key));
		}
	}
	return join " | ", @ret;
}

#        caps:   caps=0x7fdf,wtmult=512,dtsize=32768,bsize=0,namlen=255
#        nfsv4:  bm0=0xfdffbfff,bm1=0xf9be3e,bm2=0x0,acl=0x3,pnfs=not configured
sub parse_input {
	my $str = shift;
	my @ret = ();

	return sprintf("caps=%s - %s", $1, get_caps(hex($1))) if ($str =~ /^caps=(0x[0-9a-f]+)/);

	push @ret, sprintf("bm0=%s - %s", $1, decode_nfsv4_word(hex($1), 0)) if ($str =~ /bm0=(0x[0-9a-f]+)/);
	push @ret, sprintf("bm1=%s - %s", $1, decode_nfsv4_word(hex($1), 1)) if ($str =~ /bm1=(0x[0-9a-f]+)/);
	push @ret, sprintf("bm2=%s - %s", $1, decode_nfsv4_word(hex($1), 2)) if ($str =~ /bm2=(0x[0-9a-f]+)/);

	push @ret, sprintf("caps=%s - %s", $1, get_caps(hex($1))) if ((!scalar(@ret)) && ($str =~ /(0x[0-9a-f]+)/));
	push @ret, sprintf("unable to translate '%s' to nfs caps", $str) if (!scalar(@ret));
	return join "\n", @ret;
}

if ($ARGV[0]) {
	my $str = parse_input($ARGV[0]);
	printf("%s\n", $str);
}
