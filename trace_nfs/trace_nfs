#!/bin/bash

usage() {
	echo "usage: $0 <pid>"
	echo -e "\twhere <pid> refers to the pid of the bash shell in which the commands will be executed"
}

trace_pid=${1:-}
[[ -z $trace_pid ]] && {
	usage
	exit 1
}
#trace_pid=
[[ ! -d /proc/$trace_pid ]] && {
	echo "unable to locate pid $trace_pid"
	usage
	exit 1
}
pidname=$(basename $(readlink -f /proc/$trace_pid/exe))
[[ -n $pidname && $pidname -eq "bash" ]] || {
	echo "pid $trace_pid is '$pidname', not bash?"
	usage
	exit 1
}

already_running_pids=$(pidof dmesg tshark)
[[ -n $already_running_pids ]] && {
	echo "tracing-related processes are already running?"
	ps -c $already_running_pids
	echo
	echo "interrupt this script within 10 seconds to investigate further"
	sleep 10
	echo "continuing with potentially interfering processes"
}



outputdir=/var/tmp/$(hostname -s)_$(date +"%Y-%m-%d_%H.%M.%S")
logfile=$outputdir/log

syslog_rcvr_pid=""
logger_pid=""
dmesg_pid=""
tshark_pid=""
strace_pid=""


mkdir -p $outputdir
>$logfile

out_pipe=$outputdir/out.pipe.$$
mkfifo $out_pipe

exec 3>&1 4>&2 # save stdout/stderr
real_stdout=$(readlink -f /proc/$$/fd/1)


gather_proc_data() {
	local pre_post=$1

	date >$outputdir/date.$pre_post
	date -u >$outputdir/date_-u.$pre_post
	uptime >$outputdir/uptime.$pre_post
	free >$outputdir/free.$pre_post
	for f in slabinfo meminfo self/mountinfo self/mountstats; do
		cat /proc/$f >$outputdir/$(basename $f).$pre_post
	done

	# RHEL 7 lslocks, or try the RHEL 6 lslk if that fails
	lslocks >$outputdir/lslocks.$pre_post 2>&1 || lslk >$outputdir/lslk.$pre_post 2>&1

	ps axf >$outputdir/ps_axf.$pre_post
	ps auxwww >$outputdir/ps_aux.$pre_post
	ps awwwxo flags,state,uid,pid,ppid,pgid,sid,cls,pri,addr,sz,wchan:15,lstart,tty,time,cmd >$outputdir/ps_awwwxo_.$pre_post
	lsns -u >$outputdir/lsns_-u.$pre_post 2>&1
	lsof >$outputdir/lsof.$pre_post 2>&1

	if [[ -d /proc/$trace_pid/ ]] ; then
		xargs -0 -L1 -a /proc/$trace_pid/environ >$outputdir/pid.$trace_pid.environ.$pre_post
		for f in limits mountinfo mountstats loginuid gid_map ; do
			cat /proc/$trace_pid/$f >$outputdir/pid.$trace_pid.$f.$pre_post 2>&1
		done
		readlink -f /proc/$trace_pid/cwd >$outputdir/pid.$trace_pid.cwd.$pre_post
	else
		echo "Traced pid ($trace_pid) no longer running...  unable to gather $pre_post-run data for the process"
	fi
}

exit_cleanup() {
	trap - SIGTERM SIGINT EXIT

	echo "cleaning up and exiting"

	rpcdebug -m nfs -c all
	rpcdebug -m rpc -c all
	rpcdebug -m nlm -c all

	[[ -n $strace_pid ]] && [[ -d /proc/$strace_pid ]] && kill $strace_pid && wait $strace_pid
	[[ -n $tshark_pid ]] && [[ -d /proc/$tshark_pid ]] && kill $tshark_pid && wait $tshark_pid

	if [[ $have_dmesg && -n $dmesg_pid && -d /proc/$dmesg_pid ]] ; then
		kill $dmesg_pid && wait $dmesg_pid
	else
		cp /var/log/messages $outputdir/messages.post
	fi

	echo "gathering post-trace data"
	gather_proc_data post

	echo "compressing logged data"

        exec 1>&3 3>&- 2>&4 4>&-
        sleep 0.25
        [[ -n $logger_pid && -d /proc/$logger_pid ]] && kill $logger_pid && wait $logger_pid
	[[ -n $syslog_rcvr_pid && -d /proc/$syslog_rcvr_pid ]] && kill $syslog_rcvr_pid && wait $syslog_rcvr_pid
	rm -f $out_pipe

	cd $(dirname $outputdir)
	tar cJf $outputdir.tar.xz $(basename $outputdir)
	cd -
	echo "data collected in $outputdir.tar.xz"

	exit
}
trap exit_cleanup EXIT
interrupt() {
#	echo "interrupted" | tee -a $logfile >$real_stdout
	echo "interrupted"
	exit_cleanup
}
trap interrupt SIGTERM SIGINT

SYSLOG_RCVR='
#!/usr/bin/perl

use IO::Socket;

$server = IO::Socket::INET->new(LocalPort => 514, Proto => "udp")
        or die "error listening on syslog port: $@\n";

sub interrupt {
	close($server);
	exit(0);
}
$SIG{"INT"} = "interrupt";
$SIG{"TERM"} = "interrupt";

printf("syslog receiver started\n");
while ($server->recv($datagram, 1024)) { }
';

LOGGER='
#!/usr/bin/perl -w

use Time::HiRes qw(gettimeofday);
use POSIX qw(strftime);
use IO::Socket;

if (scalar @ARGV != 3) {
        printf("usage: %s <input_file> <output_file> <log_file>\n", "foo");
printf("got @ARGV\n");
        exit(1);
}

$in_file = $ARGV[0];
$real_stdout = $ARGV[1];
$log_file = $ARGV[2];

open(IN, "<", $in_file) or die "could not open file $in_file: $!";
open(LOG, ">>", $log_file) or die "could not open log file $log_file: $!";
open(OUT, ">", $real_stdout) or die "could not open real stdout $real_stdout: $!";

$socket = IO::Socket::INET->new(
        PeerAddr => "127.0.0.1",
        PeerPort => 514,
        Type => SOCK_DGRAM,
        Proto => "udp") or die "could not create socket: $!";

LOG->autoflush(1);
OUT->autoflush(1);
$socket->autoflush(1);

printf("logger started\n");
while (<IN>) {
        chomp;

        ($s, $us) = gettimeofday;
        $tstamp_str = sprintf "%s.%06d", strftime("%Y-%m-%d %H:%M:%S", localtime $s), $us;
        $out_str = $tstamp_str . ":  " . $_;

        print(LOG $out_str . "\n");
        print(OUT $out_str . "\n");
        if ($_ ne "" and $_ ne "\n") {
                $socket->send($out_str);
        }
}
';

perl -e "$SYSLOG_RCVR" </dev/null >$outputdir/syslog_rcvr.out 2>&1 &
syslog_rcvr_pid=$!
sleep 0.25
if [[ -d /proc/$syslog_rcvr_pid ]] ; then
	echo "started syslog receiver as pid $syslog_rcvr_pid" | tee -a $logfile >$real_stdout
else
	echo "failed to start syslog receiver:" | tee -a $logfile >$real_stdout
	cat $outputdir/syslog_rcvr.out | tee -a $logfile >$real_stdout
	echo "assuming port already listened...  continuing without" | tee -a $logfile >$real_stdout
	syslog_rcvr_pid=""
fi

perl -e "$LOGGER" $out_pipe $real_stdout $logfile </dev/null >$outputdir/logger.out 2>&1 &
logger_pid=$!
echo "logger pid: $logger_pid" | tee -a $logfile >$real_stdout

exec 1<>$out_pipe 2<>$out_pipe
sleep 0.25

[[ -d /proc/$logger_pid ]] || {
        exec 1>&3 3>&- 2>&4 4>&-
	echo "Logger did not start:" | tee -a $logfile >$real_stdout
	cat $outputdir/logger.out | tee -a $logfile >$real_stdout
	logger_pid=""

	exit 1
}
echo "started logger as pid $logger_pid" | tee -a $logfile >$real_stdout

# determine IPs and interfaces
#server_ips_str=( $(egrep -o '\baddr=[0-9.]+' /proc/self/mountinfo | cut -f2 -d= | sort -u) )
#server_ips=( ( $(egrep -o '\baddr=[0-9.]+' /proc/self/mountinfo | cut -f2 -d= ; echo "127.0.0.1") | sort -u) )
capture_ips=( $(egrep -o '\baddr=[0-9.]+' /proc/self/mountinfo | awk -F= 'BEGIN {print "127.0.0.1"} {print $2}' | sort -u) )

[[ -z ${capture_ips[*]} ]] && {
        echo "Unable to locate IP addresses of nfs server(s)" | tee -a $logfile >$real_stdout
        echo "please mount an nfs filesystem before starting this script" | tee -a $logfile >$real_stdout
        echo | tee -a $logfile >$real_stdout
        usage | tee -a $logfile >$real_stdout
        exit 1
}
capture_filter=""
for ip in ${capture_ips[*]} ; do
        if [[ -z $capture_filter ]] ; then
                capture_filter="("
        else
                capture_filter="$capture_filter or "
        fi
        capture_filter="${capture_filter}host $ip"
done
capture_filter="$capture_filter) or udp port 514"

ifaces=( $(for ip in ${capture_ips[*]} 127.0.0.1 ; do
        ip route get $ip | head -n -1 | awk '
($1 == "local" && $3 == "dev") {print $4}
($2 == "via" && $4 == "dev") {print $5}
($2 == "dev") {print $3}
' ; done | sort -u) )
iface_strs=""
for iface in ${ifaces[*]} ; do
        iface_str="$iface_str -i $iface"
done

(
	echo "capture_ips: ${capture_ips[*]}"
	echo "capture_filter: $capture_filter"

	echo "interfaces: ${ifaces[*]}"
	echo "interface string: $iface_str"
) | tee -a $logfile


echo "gathering initial information"
uname -a | tee $outputdir/uname
hostname | tee $outputdir/hostname
lsmod | tee $outputdir/lsmod

rpcdebug -m nfs -c all
rpcdebug -m rpc -c all
rpcdebug -m nlm -c all

echo "tracing pid $trace_pid"
uidgid=( $(stat -c "%u %g %U %G" /proc/$trace_pid/) )

echo "uid:gid = ${uidgid[0]}:${uidgid[1]} (${uidgid[2]}:${uidgid[3]})"
id ${uidgid[2]}

have_dmesg=0
timeout 3 dmesg -Tw >/dev/null 2>&1
ret=$?
[[ $ret -eq 124 ]] && have_dmesg=1

echo "have_dmesg is $have_dmesg"

if [[ $have_dmesg -gt 0 ]] ; then
echo "have dmesg"
	dmesg -Tc >$outputdir/dmesg.pre 2>&1
	dmesg -Tw >$outputdir/dmesg.out 2>&1 &
	dmesg_pid=$!
else
echo "do not have dmesg"
	
	dmesg >$outputdir/dmesg.pre 2>&1
	cp /var/log/messages $outputdir/messages.pre
fi

sysctl -a >$outputdir/sysctl 2>/dev/null
free -m >$outputdir/free_-m
cat /proc/cpuinfo >$outputdir/cpuinfo


gather_proc_data pre



echo "initialization complete, starting tracing"


#rpcdebug -m nfs -s vfs dircache lookupcache pagecache proc file fscache
rpcdebug -m nfs -s all
#rpcdebug -m rpc -s call debug cache misc nfs
rpcdebug -m rpc -s all
rpcdebug -m nlm -s all

tshark -w $outputdir/trace.pcap $iface_str  "$capture_filter" >$outputdir/tshark.out 2>&1 &
tshark_pid=$!
while [[ 42 ]] ; do
	egrep -q "^Capturing on" $outputdir/tshark.out && break
	sleep 0.25
done

strace -fttTvyqqo $outputdir/strace.out -p $trace_pid -s 1048576 >$outputdir/strace.err 2>&1 &
strace_pid=$!
sleep 0.25


sysctl vm.drop_caches=3
echo "tracing started, use Ctrl-C to stop tracing"

while [[ 42 ]] ; do
	# did our traced process die?
	[[ -d /proc/$trace_pid ]] || {
		echo "Traced process exited...  cancelling tracing"
		interrupt
	}
	sleep 1
done

exit 1 # we don't expect to ever reach here
