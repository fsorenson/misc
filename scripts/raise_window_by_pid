#!/bin/bash

# raise_window_by_pid - Frank Sorenson <sorenson@redhat.com>, 2021
#
# usage:  raise_window_by_pid <PID>
#
# raise the X window that has <PID>, if <PID> is the process associated
#     with the X window ID, or the X window ID associated with an
#     ancestor pid of <PID>


me=$0
me_exe=$(basename "$me")
me_dir=$(dirname "$me")


declare -a ppids
declare -a pid_windows
declare -a to_raise
declare -a pids_found
declare -a pids_not_found
declare -A cwds_assoc=()
declare -a cwds

verbosity=0


usage_exit() {
	echo "usage:  $0 <PATTERN> [ <PATTERN> ... ]"
	exit $1
}
[[ $# -eq 0 ]] && usage_exit 1


proc_pid_cwd_to_pid() {
	local OIFS=$IFS
	IFS='/ '
	local tmp=($1)
	[[ ${tmp[2]} =~ ^[0-9]+$ ]] && echo ${tmp[2]}
	IFS=$OIFS
}



build_pid_cwds() {

	for pid_cwd in /proc/*/cwd ; do
		local cwd=$(readlink -f $pid_cwd)
		[[ -z $cwd ]] && continue

		local pid=$(proc_pid_cwd_to_pid $pid_cwd)
		[[ $pid -eq $$ ]] && continue

		cwds[$pid]="$cwd"
		local new_val="${cwds_assoc[$cwd]} $pid"
		cwds_assoc["$cwd"]=$new_val

	done
}
check_pwd_pattern() {
	local cwd
	local pids

#	for pid_cwd in "${cwds[@]}" ; do
	for cwd in "${!cwds_assoc[@]}" ; do
		if [[ $cwd =~ $1 ]] ; then
			pids="$pids ${cwds_assoc[$cwd]}"
		fi
	done
	[[ -n $pids ]] && { echo $pids ; return 0 ; }
	return 1
}


raise_by_pwd() {
#if [[ $me_exe == "raise_window_by_pwd" ]] ; then
#	[[ $# -eq 0 ]] && {
#		echo "usage: $0 <directory>" >&2
#		exit 1
#	}
	declare -a cwds=($@)
	declare -A cwds_assoc=()
	for i in $(seq 0 $(( ${#cwds[@]} - 1 )) ) ; do


		cwds_assoc[${cwds[$i]}]=1
	done

	pid_cwds=$(echo /proc/*/cwd)

#	for pid_cwd in $pid_cwds ; do




	pids=$(
		for pid_cwd in $pid_cwds ; do
			cwd=$(readlink -f $pid_cwd)
			[[ -z $cwd ]] && continue
			if [[ -n ${cwds_assoc[$cwd]} ]] ; then
				proc_pid_cwd_to_pid $pid_cwd
			else
				for pat in "${cwds[@]}" ; do
					if [[ $cwd =~ $pat ]] ; then
						proc_pid_cwd_to_pid $pid_cwd
						break
					fi
				done
			fi
		done
	)

	echo "directory patterns match $(echo $pids | wc -w) pids" >&2
#	echo $pids | egrep -v self | sort -u | paste -s - -d' '

	[[ -z $pids ]] && {
		echo "no pids found using the given patterns" >&2
		return 1
	}
	echo $pids
	return 0
	$me_dir/raise_window_by_pid $pids
	exit
} # end of raise_by_pwd







pid=${1:-}

[[ -z $pid ]] && {
	echo "usage: $0 <pid>" >&2
	exit 1
}

raise_window_id() {
	local id=$1
	[[ $verbosity -ge 0 ]] && echo "raising window id '$id'" >&2
	xdotool windowraise $id
	xdotool windowactivate $id
}
raise_window_ids() {
	[[ $verbosity -ge 0 ]] && echo "raising $# windows" >&2
	while [[ $# -gt 0 ]] ; do
		raise_window_id "$1"
		shift
	done
}
trim_running_pids() {
	local pids_string=$(echo "$*" | tr ' ' ,)
	ps h -p "$pids_string" -o pid:11
}
get_pid_windows() {
	local window_id foo1 pid foo2
	while read window_id foo1 pid foo2 ; do
		if [[ -z ${pid_windows[$pid]} ]] ; then
			pid_windows[$pid]=$window_id
		else
			pid_windows[$pid]="${pid_windows[$pid]} $window_id"
		fi
	done <<< "$(wmctrl -lp)"
}
get_ppids() {
	local pid ppid
	while read pid ppid ; do
		ppids[$pid]=$ppid
	done <<< "$(ps h ax -o pid:1,ppid:1)"
}


mark_pids_found() {
	local p

	for p in $* ; do
		pids_found[$p]=$p
	done
}
mark_pids_not_found() {
	local p
	[[ $verbosity -ge 1 ]] && echo "marking pids $* not found" >&2
	for p in $* ; do
		[[ $verbosity -ge 2 ]] && echo "marking pid $p not found" >&2
		pids_not_found[$p]=$p
	done
}
mark_window_ids() {
	local w

	for w in $* ; do
		to_raise[$w]=$w
	done
}

find_pid_window_ids() {
	local this_pid=$1
	local current_pid=$this_pid
	local parentage=""

	if [[ -z ${ppids[$pid]} ]] ; then
		[[ $verbosity -ge 1 ]] && echo "no pid: $pid" >&2
		return
	fi

	while [[ 42 ]] ; do
		if [[ -z $current_pid || $current_pid -eq 0 || $current_pid -eq 1 ]] ; then
			# can't raise pid 0/1
			[[ $verbosity -ge 0 ]] && echo "unable to locate a window id for pid $this_pid" >&2
			[[ -n $parentage ]] && mark_pids_not_found $parentage
			return
		fi
		if [[ -n ${pids_not_found[$current_pid]} ]] ; then
			[[ $verbosity -ge 1 ]] && echo "already determined we can't find a window id for pid $current_pid" >&2
			if [[ -n $parentage ]] ; then
				[[ $verbosity -ge 1 ]] && echo "and children $parentage" >&2
				mark_pids_not_found $parentage
			fi
			return
		fi

		if [[ -n ${pids_found[$current_pid]} ]] ; then
			[[ $verbosity -ge 2 ]] && echo "already raising window for pid $this_pid" >&2
			[[ -n $parentage ]] && mark_pids_found $parentage
			return
		fi

		parentage="$parentage $current_pid"

		if [[ -n ${pid_windows[$current_pid]} ]] ; then
			[[ $verbosity -ge 2 ]] && \
				echo "window_id(s) for pid $this_pid (currently $current_pid) is/are ${pid_windows[$current_pid]}" >&2
			mark_pids_found $parentage
			mark_window_ids ${pid_windows[$current_pid]}
			return
		fi
		current_pid=${ppids[$current_pid]}
	done
	[[ $verbosity -ge 0 ]] && echo "unable to locate a window id for pid $pid" >&2
}

raise_by_pid() {
	for pid in $running_pids ; do
		find_pid_window_ids $pid
	done

	if [[ ${#to_raise[*]} -gt 0 ]] ; then
		raise_window_ids ${to_raise[*]}
	else
		[[ $verbosity -ge 0 ]] && echo "could not locate any windows to raise" >&2
	fi

}




get_pid_windows
get_ppids
build_pid_cwds

pwd_args_count=0
cmd_args_count=0
cmd_maybe_pwd_count=0
pid_args=""

declare -a pwd_args
declare -a cmd_args
declare -a cmd_maybe_pwd_args

DIGITS_RE="^[0-9]+$"

while [[ $# -gt 0 ]] ; do
	arg=$1 ; shift

	if [[ $arg =~ $DIGITS_RE ]] ; then
		pid_args="$pid_args $arg"
		echo "$arg is a pid arg"

		continue
	fi

	if [[ -e $arg ]] ; then # is this a file/directory/etc.?
		path=$(readlink -f "$arg")
		new_pids=$(fuser "$path" 2>/dev/null)
		[[ -z $new_pids ]] && break # couldn't find any here

		pid_args="$pid_args $new_pids"
		echo "$arg is a path - pids: $new_pids"

		continue
	fi

	if [[ $arg =~ / ]] ; then # probably a partial path ... check cwds
		if new_pids=$(check_pwd_pattern "$arg") ; then
			pid_args="$pid_args $new_pids"
			echo "$arg matches pwds for $new_pids"
			continue
		fi
	fi

	if pids=$(pgrep -f "$arg") ; then
		pid_args="$pid_args $pids"

		echo "$arg looks like a process string - pids: $pids"
		continue
	fi

	echo "could not find a match for '$arg'"

#		pwd_args[$pwd_args_count]=$arg
#		pwd_args_count=$(($pwd_args_count + 1))

#		echo "treating $arg as a CWD arg"

	



#		continue
#	fi


done

[[ -z $pid_args ]] && {
	echo "could not find any pids"
	exit
}

running_pids=$(trim_running_pids $pid_args)
[[ -z $running_pids ]] && {
	echo "could not find any running pids"
	usage_exit
}
[[ $verbosity -ge 0 ]] && echo "trying to raise windows for running pids: $running_pids" >&2


raise_by_pid "$running_pids"



exit


	for pid in $running_pids ; do
		find_pid_window_ids $pid
	done

	if [[ ${#to_raise[*]} -gt 0 ]] ; then
		raise_window_ids ${to_raise[*]}
	else
		[[ $verbosity -ge 0 ]] && echo "could not locate any windows to raise" >&2
	fi

	if [[ ${arg:0:1} == "/" ]] && [[ -f $arg ]] ; then # file



	elif [[ $arg =~ / ]] && [[ ${arg:0:1} == "/" ]] && ; then





exit



	$ RE="^[0-9]+$"
[sorenson@bearskin bin]$ [[ $foo =~ $RE ]] && echo true
true




done




running_pids=$(trim_running_pids "$*")
[[ -z $running_pids ]] && {
	[[ $verbosity -ge 0 ]] && echo "no pids found" >&2
	exit 1
}

[[ $verbosity -ge 1 ]] && echo "pids: " $running_pids >&2





