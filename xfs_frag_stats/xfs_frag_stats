#!/usr/bin/perl -w

# Frank Sorenson <sorenson@redhat.com>, 2019

use strict;
use warnings;

use Getopt::Long;
use File::Find;
use File::stat;
use Fcntl ':mode';
use POSIX;

my $search_maj_min;

my $fmt = "";
my $fmt_LNK = "";
my $fmt_IGNORED = "";
my $skip_field_width = 0;

my @field_widths = ( 10, 12, 8, 8, 6, 0 );

sub center_str {
	my $str = shift;
	my $len = shift;

	$str = " "x int(($len - length($str))/2 - 1) . $str;
	$len = $len - 1;
	return sprintf("%-${len}s", $str);
}

for (my $i = 0 ; $i < (scalar @field_widths) ; $i++) {
	my $w = $field_widths[$i];
	my $tmp_s = "";

	$tmp_s .= " " if ($i != 0);
	if ($w > 0) { $tmp_s .= "%${w}s"; }
	else { $tmp_s .= "%s"; }

	$fmt .= $tmp_s;
	if ($i < 2 || $i > 4) {
		$fmt_LNK .= $tmp_s;
		$fmt_IGNORED .= $tmp_s;
	} else {
		$skip_field_width += $w + 1;

		if ($i == 4) {
			$fmt_LNK .= " " . center_str("N/A", $skip_field_width);
			$fmt_IGNORED .= " " . center_str("IGNORED", $skip_field_width);
		}
	}
}
$fmt_LNK .= " => %s";

my $show_dirs = 1;
my $show_files = 1;
my $quiet = 0;

GetOptions(
	'dirs' => sub { $show_dirs = 1; $show_files = 0; },
	'files' => sub { $show_files = 1; $show_dirs = 0; },
	'quiet' => sub { $quiet = 1; }
);

if (!defined($ARGV[0])) {
	$ARGV[0] = ".";
}

sub logn {
	my $val = shift;
	my $base = shift;
	return log($val)/log($base);
}
my @unit_strings;
$unit_strings[1000] = [ " bytes", "KB", "MB", "GB", "TB", "PB", "EB", "ZB", "YB" ];
$unit_strings[1024] = [ " bytes", "KiB", "MiB", "GiB", "TiB", "PiB", "EiB", "ZiB", "YiB" ];
sub byte_units {
	my $size = shift;
	my $base = shift;
	my $sigfigs = shift;

	if (!defined($sigfigs)) { $sigfigs = 2; }

	if ($size < $base || !defined($unit_strings[$base])) {
		return sprintf("%d bytes", $size);
	}
	my $i = POSIX::floor(logn($size,$base));
	my $divider = POSIX::pow($base, $i);
	return sprintf("%.*f %s",
		(int($size / $divider) eq ($size / $divider)) ? 0 : $sigfigs, $size / $divider, $unit_strings[$base][$i]);
}

#my @mode_bits = ('---', '--x', '-w-', '-wx', 'r--', 'r-x', 'rw-', 'rwx');
my @mode_bits = (
	['-', '-', '-'], ['-', '-', 'x'], ['-', 'w', '-'], ['-', 'w', 'x'],
	['r', '-', '-'], ['r', '-', 'x'], ['r', 'w', '-'], ['r', 'w', 'x']);
sub mode_bits_string {
	my $mode = shift;

	my $u = ($mode & S_IRWXU) >> 6;
	my $g = ($mode & S_IRWXG) >> 3;
	my $o = $mode & S_IRWXO;

	my @usr = @{$mode_bits[($mode & S_IRWXU) >> 6]};
	my @grp = @{$mode_bits[($mode & S_IRWXG) >> 3]};
	my @oth = @{$mode_bits[$mode & S_IRWXO]};

	if ($mode & S_ISUID) { $usr[2] = $usr[2] == 'x' ? 's' : 'S'; }
	if ($mode & S_ISGID) { $grp[2] = $grp[2] == 'x' ? 's' : 'S'; }
	if ($mode & S_ISVTX) { $oth[2] = $oth[2] == 'x' ? 't' : 'T'; }
	return join("", @usr, @grp, @oth);
}
sub mode_type_char {
	my $mode = shift;
	return S_ISREG($mode) ? "-" :
		S_ISDIR($mode) ? "d" :
		S_ISLNK($mode) ? "l" :
		S_ISBLK($mode) ? "b" :
		S_ISCHR($mode) ? "c" :
		S_ISFIFO($mode) ? "p" :
		S_ISSOCK($mode) ? "s" : "?";
}
sub get_extent_count {
	my $path = shift;
	my $extents = -1;
	my $holes = 0;

	open(EXEC, '-|', "/usr/sbin/xfs_bmap", $path) or die "Can't exec: $!\n";
	while (my $line = <EXEC>) {
		$line =~ s/^\s+|\s+$//g;
		if ($line =~ /.+hole$/) { $holes++; }
		else { $extents ++; }
	}
	close EXEC;
	return ($extents, $holes);
}
sub get_hint {
	my $path = shift;

	open(EXEC, "-|", "/usr/sbin/xfs_io", "-r", "-c", "extsize", $path) or die "Couldn't exec xfs_io: $!\n";
	my $out = <EXEC>;
	$out =~ s/^\s+|\s+$//g;
	close EXEC;
	if ($out =~ /^\[([0-9]+)\].+/) { return $1; }
	return 0;
}

sub file_stats {
	my ($extents, $holes, $hint);
	my $hint_str = "";
	my $path = $File::Find::name;
	my $stats = lstat($path);
	my $maj_min = $stats->dev;

	if ($search_maj_min ne $stats->dev) {
		$File::Find::prune = 1;
		return;
	}

	my $mode = $stats->mode;
	my $size = $stats->size;

	# stat fields:  dev, ino, mode, nlink, uid, gid, rdev, size, atime, mtime, ctime, blksize, blocks
	my $stat_fields ="
             0 dev      device number of filesystem
             1 ino      inode number
             2 mode     file mode  (type and permissions)
             3 nlink    number of (hard) links to the file
             4 uid      numeric user ID of file's owner
             5 gid      numeric group ID of file's owner
             6 rdev     the device identifier (special files only)
             7 size     total size of file, in bytes
             8 atime    last access time in seconds since the epoch
             9 mtime    last modify time in seconds since the epoch
            10 ctime    inode change time in seconds since the epoch (*)
            11 blksize  preferred I/O size in bytes for interacting with the
                        file (may vary from file to file)
            12 blocks   actual number of system-specific blocks allocated
                        on disk (often, but not always, 512 bytes each)
	";

	my $suid = $mode & S_ISUID ? 1 : 0;
	my $sgid = $mode & S_ISGID ? 1 : 0;
	my $sticky = $mode & S_ISVTX ? 1 : 0;
#	my $svtext = $mode & S_ISTXT ? 1 : 0;

	my $symbolic = mode_type_char($mode) . mode_bits_string($mode);
	my $size_str = byte_units($size, 1024);

	if (S_ISLNK($mode)) {
		printf("${fmt_LNK}\n", $symbolic, $size_str, $path, readlink($path)) if (! $quiet);
		return;
	} elsif ((! $show_dirs && S_ISDIR($mode)) ||
		(! $show_files && S_ISREG($mode))) {

		printf("${fmt_IGNORED}\n", $symbolic, $size_str, $path) if (! $quiet);
		return;
	} else {
		($extents, $holes) = get_extent_count($path);
		$hint = get_hint($path);

		if ($hint ne 0) { $hint_str = byte_units($hint, 1024, 0); }
		else { $hint_str = "0"; }
	}

	printf("${fmt}\n", $symbolic, $size_str, $extents, $holes, $hint_str, $path);
}

sub is_xfs_fs {
	my $path = shift;

	open(my $fh, "-|", "/usr/bin/stat", $path, "-f", "-c", "%T") or die "Couldn't stat $path: $!\n";
	my $fstype = <$fh>;
	close $fh;
	my $exit = $? >> 8;

	if ($exit) {
		printf("unable to stat %s\n", $path);
		return 0;
	}

	$fstype =~ s/^\s+|\s+$//g;

	return 1 if ($fstype eq "xfs");
	return 0;
}

printf("${fmt} (=>link target)\n", "mode", "size", "extents", "holes", "hint", "path");
for my $dir (@ARGV) {
	if (is_xfs_fs($dir)) {
		my $stats = lstat($dir);
		$search_maj_min = $stats->dev;

		find({ wanted => \&file_stats, no_chdir => 1}, $dir);
	} else {
		printf("skipping non-xfs filesystem $dir\n");
	}
}
