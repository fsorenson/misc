#!/usr/bin/perl -w

use strict;
use warnings;

use File::Basename;
use Data::Dumper;
use Cwd 'abs_path';
use POSIX 'strerror';

my %xprt_info = ();


my %rpc_xprt_states = (
	0 => "XPRT_LOCKED",
	1 => "XPRT_CONNECTED",
	2 => "XPRT_CONNECTING",
	3 => "XPRT_CLOSE_WAIT",
	4 => "XPRT_BOUND",
	5 => "XPRT_BINDING",
	6 => "XPRT_CLOSING",
	9 => "XPRT_CONGESTED",
);
sub show_rpc_xprt_states {
	foreach my $key (sort(keys(%rpc_xprt_states))) {
		my $name = $rpc_xprt_states{$key};
		printf("\t0x%x - %s\n", $key, $name);
	}
};
my %rpc_task_flags = (
	0x0001 => "RPC_TASK_ASYNC",
	0x0002 => "RPC_TASK_SWAPPER",
	0x0020 => "RPC_CALL_MAJORSEEN",
	0x0040 => "RPC_TASK_ROOTCREDS",
	0x0080 => "RPC_TASK_DYNAMIC",
	0x0100 => "RPC_TASK_KILLED",
	0x0200 => "RPC_TASK_SOFT",
	0x0400 => "RPC_TASK_SOFTCONN",
	0x0800 => "RPC_TASK_SENT",
	0x1000 => "RPC_TASK_TIMEOUT",
	0x2000 => "RPC_TASK_NOCONNECT",
	0x4000 => "RPC_TASK_NO_RETRANS_TIMEOUT",
);
sub indent_str {
	my $count = shift;
	return "  " x $count;
}

sub show_rpc_task_flags {
	foreach my $key (sort {$a<=>$b} keys(%rpc_task_flags)) {
		my $name = $rpc_task_flags{$key};
		printf("\t0x%x - %s\n", $key, $name);
	}
};
sub xprt_states_str {
	my @ret = ();
	my $val = int(shift);

	foreach my $bit (sort {$a <=> $b} keys(%rpc_xprt_states)) {
		my $name = $rpc_xprt_states{$bit};
		if ($val & (1 << $bit)) {
			push(@ret, substr($name, 5));
		}
	}
	return join(" | ",@ret);
};

sub rpc_task_flags_str {
	my $val = hex(shift);
	my @ret = ();

	foreach my $key (sort {$a<=>$b} keys(%rpc_task_flags)) {
		my $name = $rpc_task_flags{$key};
		if ($val & hex($key)) {
			push(@ret, substr($name, 9));
		}
	}
	return join(" | ",@ret);
};


die("no debug directory: /sys/kernel/debug/sunrpc/") if (! -d "/sys/kernel/debug/sunrpc/");
	opendir DIR, "/sys/kernel/debug/sunrpc/rpc_xprt" or die("Unable to open /sys/kernel/debug/sunrpc/rpc_xprt");
	my @xprt_contents = readdir DIR;
	closedir DIR;

	foreach my $d (@xprt_contents) {
		next if ($d eq "." || $d eq "..");
		my $info_file = "/sys/kernel/debug/sunrpc/rpc_xprt/" . $d . "/info";
		my $xprt_num = int($d);

		open(my $fh, $info_file) or die("unable to open $info_file");

		while (<$fh>) {
			chomp;
			my $line = $_;
			if ($line =~ /^state: (.+)/) {
				$xprt_info{$xprt_num}{'state'} = hex($1);
			} elsif ($line =~ /^netid: (.+)/) {
				$xprt_info{$xprt_num}{'netid'} = $1;
			} elsif ($line =~ /^addr: (.+)/) {
				$xprt_info{$xprt_num}{'addr'} = $1;
			} elsif ($line =~ /^port: (.+)/) {
				$xprt_info{$xprt_num}{'port'} = $1;
			}
		}
		$xprt_info{$xprt_num}{'tasks'} = [];
		$xprt_info{$xprt_num}{'clnts'} = [];
		close $fh;
	}

	opendir DIR, "/sys/kernel/debug/sunrpc/rpc_clnt" or die("Unable to open /sys/kernel/debug/sunrpc/rpc_clnt");
	my @clnt_contents = readdir DIR;
	closedir DIR;

	foreach my $clnt (@clnt_contents) {
		next if ($clnt eq "." || $clnt eq "..");
		my $clnt_num = int($clnt);

		my $tasks_file = "/sys/kernel/debug/sunrpc/rpc_clnt/" . $clnt_num . "/tasks";
		my $clnt_xprt_link = "/sys/kernel/debug/sunrpc/rpc_clnt/" . $clnt_num . "/xprt";
		open (my $fh, $tasks_file) or die("unable to open $tasks_file");
		my $task_count = 0;

		my $xprt_num = int(basename(readlink("/sys/kernel/debug/sunrpc/rpc_clnt/" . $clnt_num . "/xprt")));
		push $xprt_info{$xprt_num}{'clnts'}, $clnt_num;

		while (<$fh>) {
			chomp;
			my $line = $_;

			if ($line =~ /^\s*([0-9]+) ([0-9a-f]+) \s*([-0-9]+) (0x[0-9a-f]+) (0x[0-9a-f]+) \s*([0-9]+) ([^ ]+ [^ ]+) ([^ ]+v[^ ]+) ([^ ]+) (a:[^ ]+ \[[^ ]+\]) (q:.+)/) {
				my $task_pid = $1;
				my $task_flags = $2;
				my $task_status = $3;
				my $task_clientid = hex($4);
				my $task_xid = $5;
				my $task_timeout = $6;
				my $task_ops = $7;
				my $task_prog = $8;
				my $task_proc = $9;
				my $task_action = $10;
				my $task_queue = $11;
				my %new_task = (
					'pid' => $1,
					'flags' => $2,
					'status' => $3,
					'clientid' => $task_clientid,
					'xid' => hex($5),
					'timeout' => $6,
					'ops' => $7,
					'prog' => $8,
					'proc' => $9,
					'action' => $10,
					'queue' => $11,
				);
#				push @{$xprt_info{$clnt_num}{'tasks'}}, \%new_task;
#				printf("adding task to list for xprt %d\n", $xprt_num);
				push @{$xprt_info{$xprt_num}{'tasks'}}, \%new_task;

#				printf("pid: %d, flags: %x, status: %d, clientid: %s, xid: %s\ttimeout: %d, ops: %s, prog: %s, proc: %s, action: %s, queue: %s\n",
#					$new_task{'pid'}, $new_task{'flags'}, $new_task{'status'}, $new_task{'clientid'},
#					$new_task{'xid'}, $new_task{'timeout'}, $new_task{'ops'}, $new_task{'prog'}, $new_task{'proc'}, $new_task{'action'}, $new_task{'queue'});



		}
	}		




	my $rpc_xprt_count = 0;
	foreach my $rpc_xprt_num (sort {$a<=>$b} keys(%xprt_info)) {
		my %rpc_xprt = %{$xprt_info{$rpc_xprt_num}};

		printf("\n") if ($rpc_xprt_count++ != 0);
		if ($rpc_xprt{'netid'} eq "local") {
			printf("%d: %s - ", $rpc_xprt_num, $rpc_xprt{'addr'});
		} elsif ($rpc_xprt{'netid'} eq "tcp") {
			printf("%d: %s:%d - ", $rpc_xprt_num, $rpc_xprt{'addr'}, $rpc_xprt{'port'});
		} else {
			printf("%d: netid: %s, addr: %s, port: %s - ", $rpc_xprt_num, $rpc_xprt{'netid'}, $rpc_xprt{'addr'}, $rpc_xprt{'port'});
		}
		printf("%s\n", xprt_states_str($rpc_xprt{'state'}));

		my @tasks = @{ $rpc_xprt{'tasks'} };
		my $xprt_task_count = 0;
		foreach my $task (@tasks) {

			my %rpc_task = %{ $task };


			printf("\n") if ($xprt_task_count++ != 0);

			printf("%spid %d:  %s %s", indent_str(1), $rpc_task{'pid'}, $rpc_task{'prog'}, $rpc_task{'proc'});
			if ($rpc_task{'xid'} != 0)  {
				printf(" - xid: 0x%08x", $rpc_task{'xid'});
			} else {
				printf("%17s", "");
			}
			printf(" - status: %d (%s)", $rpc_task{'status'}, strerror(-$rpc_task{'status'})) if ($rpc_task{'status'} != 0);
			printf("\n");



			my $task_flags_str = rpc_task_flags_str($rpc_task{'flags'});
			printf("%sflags: %s\n", indent_str(2), $task_flags_str);

			printf("%s%s, %s\n", indent_str(2), $rpc_task{'queue'}, $rpc_task{'action'});
		}

	}
