#!/usr/bin/perl -w

use strict;
use warnings;

use File::Basename;
use Data::Dumper;
use Cwd 'abs_path';
use POSIX 'strerror';

my %rpc_xprt_states = (
	0 => "XPRT_LOCKED",
	1 => "XPRT_CONNECTED",
	2 => "XPRT_CONNECTING",
	3 => "XPRT_CLOSE_WAIT",
	4 => "XPRT_BOUND",
	5 => "XPRT_BINDING",
	6 => "XPRT_CLOSING",
	9 => "XPRT_CONGESTED",
);
my %rpc_task_flags = (
	0x0001 => "RPC_TASK_ASYNC",
	0x0002 => "RPC_TASK_SWAPPER",
	0x0020 => "RPC_CALL_MAJORSEEN",
	0x0040 => "RPC_TASK_ROOTCREDS",
	0x0080 => "RPC_TASK_DYNAMIC",
	0x0100 => "RPC_TASK_KILLED",
	0x0200 => "RPC_TASK_SOFT",
	0x0400 => "RPC_TASK_SOFTCONN",
	0x0800 => "RPC_TASK_SENT",
	0x1000 => "RPC_TASK_TIMEOUT",
	0x2000 => "RPC_TASK_NOCONNECT",
	0x4000 => "RPC_TASK_NO_RETRANS_TIMEOUT",
);
sub indent_str {
	return "  " x shift;
}

sub xprt_states_str {
	my @ret = ();
	my $val = int(shift);

	foreach my $bit (sort {$a <=> $b} keys(%rpc_xprt_states)) {
		my $name = $rpc_xprt_states{$bit};
		push(@ret, substr($name, 5)) if ($val & (1 << $bit));
	}
	return join(" | ", @ret);
};
sub rpc_task_flags_str {
	my $val = hex(shift);
	my @ret = ();

	foreach my $key (sort {$a<=>$b} keys(%rpc_task_flags)) {
		my $name = $rpc_task_flags{$key};
		push(@ret, substr($name, 9)) if ($val & hex($key));
	}
	return join(" | ", @ret);
};

sub barf {
	printf("%s\n", shift);
	return -1;
}

sub dump_rpcs {
	my $root = shift;

	my %xprt_info = ();
	my $sunrpc_dir = $root . "/sys/kernel/debug/sunrpc";
	my $rpc_xprt_dir = $sunrpc_dir . "/rpc_xprt";

	return barf("no debug directory: $sunrpc_dir") if (! -d $sunrpc_dir);
	opendir DIR, $rpc_xprt_dir or return barf("Unable to open $rpc_xprt_dir");
	my @xprt_contents = readdir DIR;
	closedir DIR;

	foreach my $xprt (@xprt_contents) {
		next if ($xprt eq "." || $xprt eq "..");
		my $info_file = $rpc_xprt_dir . "/" . $xprt . "/info";
		my $xprt_num = hex($xprt);

		open(my $fh, $info_file) or return barf("unable to open $info_file");
		while (<$fh>) {
			chomp;
			if ($_ =~ /^(state|netid|addr|port):\s+(.+)/) {
				$xprt_info{$xprt_num}{$1} = $2;
				$xprt_info{$xprt_num}{'state'} = hex($2) if ($1 eq 'state');
			}
		}
		close $fh;
		$xprt_info{$xprt_num}{'tasks'} = [];
		$xprt_info{$xprt_num}{'clnts'} = [];
	}

	my $rpc_clnt_dir = $sunrpc_dir . "/rpc_clnt";
	opendir DIR, $rpc_clnt_dir or return barf("Unable to open $rpc_clnt_dir");
	my @clnt_contents = readdir DIR;
	closedir DIR;

	foreach my $clnt (@clnt_contents) {
		next if ($clnt eq "." || $clnt eq "..");
		my $clnt_num = hex($clnt);

		my $tasks_file = $rpc_clnt_dir . "/" . $clnt . "/tasks";
		open (my $fh, $tasks_file) or return barf("unable to open $tasks_file");
		my $task_count = 0;

		my $rpc_clnt_xprt_dir = $rpc_clnt_dir . "/" . $clnt . "/xprt";
		my $xprt_num = hex(basename(readlink($rpc_clnt_xprt_dir)));
		push @{$xprt_info{$xprt_num}{'clnts'}}, $clnt_num;

		while (<$fh>) {
			chomp;
			if ($_ =~ /^\s*([0-9]+) ([0-9a-f]+) \s*([-0-9]+) (0x[0-9a-f]+) (0x[0-9a-f]+) \s*([0-9]+) ([^ ]+ [^ ]+) ([^ ]+v[^ ]+) ([^ ]+) (a:[^ ]+ \[[^ ]+\]) (q:.+)/) {
				my %new_task = (
					'pid' => $1, 'flags' => $2,
					'status' => $3, 'clientid' => hex($4),
					'xid' => hex($5), 'timeout' => $6,
					'ops' => $7, 'prog' => $8,
					'proc' => $9, 'action' => $10,
					'queue' => $11);
				push @{$xprt_info{$xprt_num}{'tasks'}}, \%new_task;
			}
		}
	}

	my $xprt_count = 0;
	foreach my $rpc_xprt_num (sort {$a<=>$b} keys(%xprt_info)) {
		my %rpc_xprt = %{$xprt_info{$rpc_xprt_num}};

		printf("\n") if ($xprt_count++ != 0);
		printf("%s: ", $rpc_xprt_num);

		if ($rpc_xprt{'netid'} eq "local") {
			printf("%s - ", $rpc_xprt{'addr'});
		} else {
			printf("%s %s:%d - ", $rpc_xprt{'netid'},
				$rpc_xprt{'addr'}, $rpc_xprt{'port'});
		}
		printf("%s\n", xprt_states_str($rpc_xprt{'state'}));

		my $task_count = 0;
		foreach my $task ( @{ $rpc_xprt{'tasks'} } ) {
			my %task = %{ $task };

			printf("\n") if ($task_count++ != 0);

			printf("%spid %d:  %s %s", indent_str(1),
				$task{'pid'}, $task{'prog'}, $task{'proc'});
			if ($task{'xid'} != 0)  {
				printf(" - xid: 0x%08x", $task{'xid'});
			} else {
				printf("%17s", "");
			}

			printf(" timeout: %.03f", $task{'timeout'} / 1000.0) if ($task{'timeout'});
			printf(" - status: %d (%s)", $task{'status'},
				strerror(-$task{'status'})) if ($task{'status'} != 0);
			printf("\n");

			printf("%sflags: %s\n", indent_str(2),
				rpc_task_flags_str($task{'flags'}));

			printf("%s%s, %s\n", indent_str(2), $task{'queue'}, $task{'action'});
		}
	}
	return 0;
}

push(@ARGV, "/") if (scalar(@ARGV) == 0);

foreach my $dir (@ARGV) {
	dump_rpcs($dir);
}
