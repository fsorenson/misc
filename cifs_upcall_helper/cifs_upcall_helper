#!/usr/bin/perl -w

# Frank Sorenson <sorenson@redhat.com>, 2025

# helper script to be entered into /etc/request-key.d/cifs.spnego
#   to enable complex matching of fields in the description field
#   of the key when using krb5 for cifs mounts

# see README file for further details

use strict;
use warnings;
use POSIX;
use Sys::Syslog;

my $log_ident = 'cifs-upcall-helper';
my $helper_version = '0.1';
my $debug_level = 1;
# 0 - only errors (LOG_ERR)
# 1 - relevant messages (LOG_INFO)
# 2 - verbose debugging (LOG_INFO)

my $helper_conf = '/etc/cifs-upcall-helper.conf';
my %upcall_opts = ();
my @upcall_args = ( '/usr/sbin/cifs.upcall' );
my $keyid;
my %vars;

my $split_char = '[,;]'; # separator for match and options fields


my $key_description_re = qr/^cifs.spnego;([0-9]+);([0-9]+);([0-9a-f]+);ver=0x2;host=([^;]+);(ip4|ip6)=([^;]+);sec=(krb5|mskrb5|iakerb);uid=(0x[0-9a-f]+);creduid=(0x[0-9a-f]+)(?:;user=([^;]+))?;pid=(0x[0-9a-f]+)(?:;upcall_target=(mount|app))?$/;
# describe format:
#  897516324: als--v-----v------------     0     0 cifs.spnego: ver=0x2;host=vm1;ip4=192.168.122.73;sec=krb5;uid=0x0;creduid=0x0;user=user1;pid=0xb302c
# rdescribe format:
#  cifs.spnego;0;0;39010000;ver=0x2;host=vm1;ip4=192.168.122.73;sec=krb5;uid=0x0;creduid=0x0;user=user1;pid=0xbaf7d;upcall_target=mount
#
#  user=<username> is optional
#  upcall_target=(mount|app) is optional

my $conf_split_re = qr/^([^\s]+)\s+(.+)/;
my $string_comparison_re = qr/^(host|user|sec|upcall_target)(=|==|!=|~|!~)(.+)/;
my $uid_comparison_re = qr/^(uid|creduid)(<|<=|=|==|>=|>|!=)(0x[0-9a-f]+|[0-9]+)$/;

my $octet_re = qr/\d{1,2}|[01]\d{2}|2[0-4]\d|25[0-5]/;
my $ip4_re = qr/(?:$octet_re\.){3}$octet_re/;
my $ip4_range_re = qr/($ip4_re)-($ip4_re)/;
my $ip4_nm_re = qr/($ip4_re)\/($ip4_re)/;
my $ip4_cidr_re = qr/($ip4_re)\/(\d+)/;
my $ip4_comparison_re = qr/^ip4(=|==|!=)(\*|$ip4_re|$ip4_range_re|$ip4_nm_re|$ip4_cidr_re)$/;
my $ip6_comparison_re = qr/^ip6=(=|==|!=|~|!~)(.+)/; # TODO: enhance ip6 comparator

sub log_msg {
	my $log_level = shift;
	my $msg = shift;
	my $syslog_level = 'info';

	$syslog_level = 'err' if $log_level < 1; # promote

	syslog($syslog_level, $msg) if ($debug_level >= $log_level);
}
sub get_key_description {
	my $keyid = shift;

	my $cmd = "keyctl rdescribe $keyid";
	open KEYCTL, $cmd . " 2>&1 |" or die "Error executing keyctl: $!";
	my $rdescribe = <KEYCTL>;
	chomp $rdescribe;
	close KEYCTL;
	if ($?) {
		log_msg 0, "Error executing keyctl: $rdescribe";
		exit -1;
	};

	log_msg 2, "description for key $keyid: $rdescribe";
	return $rdescribe;
}
sub set_upcall_opts {
	my $opts_str = shift;

	my @opts = split /$split_char/, $opts_str;
	foreach my $opt (@opts) {
		if ((my $field, my $val) = $opt =~ /^([^=]+)=(.+)$/) {
			if ($field eq 'keytab') {
				$upcall_opts{'keytab'} = $val;
			} elsif ($field eq 'krb5conf') {
				$upcall_opts{'krb5conf'} = $val;
			} elsif ($field eq 'krb5_trace') {
				$upcall_opts{'krb5_trace'} = $val;
			} else {
				log_msg 0, "unrecognized upcall option: $opt";
			}
		} elsif ($opt eq 'use_proxy' or $opt eq 'use-proxy') {
			$upcall_opts{'use_proxy'} = 1;
		} elsif ($opt eq 'legacy_uid' or $opt eq 'legacy-uid') {
			$upcall_opts{'legacy_uid'} = 1;
		} elsif ($opt eq 'trust_dns' or $opt eq 'trust-dns') {
			$upcall_opts{'trust_dns'} = 1;
		} elsif ($opt eq 'no_env_probe' or $opt eq 'no-env-probe') {
			$upcall_opts{'no_env_probe'} = 1;
		} elsif ($opt eq '*' or $opt eq '-') {
		} else {
			log_msg 0, "unrecognized upcall option: $opt";
		}
	}
}
sub replace_macros {
	my $str = shift;
	my $result = '';
	my $len = length $str;

	for (my $i = 0 ; $i < $len ; $i++) {
		my $chars = substr $str, $i, 2;
		if ($chars eq '%%') {
			$result .= '%';
			$i += 1;
		} elsif ($chars eq '%h') {
			$result .= $vars{'hostname'};
			$i += 1;
		} elsif ($chars eq '%i') {
			$result .= $vars{'ip'};
			$i += 1;
		} elsif ($chars eq '%s') {
			$result .= $vars{'sec'};
			$i += 1;
		} elsif ($chars eq '%U') {
			$result .= $vars{'uid2'};
			$i += 1;
		} elsif ($chars eq '%c') {
			$result .= $vars{'creduid'};
			$i += 1;
		} elsif ($chars eq '%u') {
			$result .= $vars{'username'};;
			$i += 1;
		} else {
			$result .= substr $chars, 0, 1;
		}
	}
	return $result;
}
sub set_upcall_args {
	foreach my $opt (keys %upcall_opts) {
		if ($opt eq 'keytab') {
			push @upcall_args, ('-K', replace_macros($upcall_opts{$opt}));
		} elsif ($opt eq 'krb5conf') {
			push @upcall_args, ('-k', replace_macros($upcall_opts{$opt}));
		} elsif ($opt eq 'krb5_trace') {
			$ENV{'KRB5_TRACE'} = replace_macros($upcall_opts{$opt});
		} elsif ($opt eq 'use_proxy') {
			$ENV{'GSS_USE_PROXY'} = 'yes';
		} elsif ($opt eq 'legacy_uid') {
			push @upcall_args, '-l';
		} elsif ($opt eq 'trust_dns') {
			push @upcall_args, '-t';
		} elsif ($opt eq 'no_env_probe') {
			push @upcall_args, '-E';
		}
	}
}
sub exec_upcall {
	set_upcall_args;
	push @upcall_args, $keyid;

	log_msg 1, sprintf("executing cifs.upcall: %s", join(' ', @upcall_args));
	exec { $upcall_args[0] } @upcall_args;
}

# matching logic
sub check_string_match {
	my $key_field_val = shift;
	my $comparator = shift;
	my $match_str = shift;

	if ($comparator eq '=' or $comparator eq '==' or $comparator eq '!=') { # glob
		$match_str =~ s/\./\\./g; # replace . with \.
		$match_str =~ s/\*/\.\*/g; # replace * with .*
	}

	my $result = 1 if ($key_field_val =~ $match_str);;
	$result = $result ^ 1 if (substr($comparator, 0, 1) eq '!');

	return $result;
}
sub check_uid_match {
	my $key_uid = shift;
	my $comparison = shift;
	my $comparison_uid = shift;

	$comparison_uid = scalar POSIX::strtol($comparison_uid, 16) if (substr($comparison_uid, 0, 2) eq '0x');

	my $comparison_string = sprintf("%d %s %d", $key_uid, $comparison, $comparison_uid);
	return 1 if (eval $comparison_string);
	return 0;
}
sub ip4_to_decimal {
	my $ip4 = shift;

	my @bytes = split /\./, $ip4;
	return $bytes[0] * 2**24 + $bytes[1] * 2**16 + $bytes[2] * 2**8 + $bytes[3];
}
sub check_ip4_match {
	my $key_ip4 = shift;
	my $comparator = shift;
	my $match_str = shift;

	log_msg 2, "check_ip4_match(key_ip: %s, comparator: %s, match_str: %s)", $key_ip4, $comparator, $match_str;

	my $negate = ($comparator eq '!=') ? 1 : 0;
	log_msg 2, "negating match in check_ip4_match" if $negate;

	my ($ip4_net_addr, $ret);

	if ($match_str eq '*') {
		log_msg 2, "ip4 match is '*' (always true)%s",
			($negate ? " but negated" : "");
		return $negate ? 0 : 1;
	} elsif ((my $ip4_addr) = $match_str =~ "^($ip4_re)\$") {
		log_msg 2, "ip4 match is a simple ip";

		$ret = ($key_ip4 eq $ip4_addr) ? 1 : 0;
		return $ret ^ $negate;
        } elsif ((my $ip4_range_low, my $ip4_range_high) = $match_str =~ "^($ip4_range_re)\$") {
		log_msg 2, "ip4 match is an ip range";

		$ip4_range_low = ip4_to_decimal $ip4_range_low;
		$ip4_range_high = ip4_to_decimal $ip4_range_high;
		$key_ip4 = ip4_to_decimal $key_ip4;

		$ret = ($key_ip4 >= $ip4_range_low and $key_ip4 <= $ip4_range_high) ? 1 : 0;
		return $ret ^ $negate;
        } elsif (($ip4_net_addr, my $ip4_netmask) = $match_str =~ "^($ip4_nm_re)\$") {
		log_msg 2, "ip4 match is an ip/netmask";


		# validate that netmask is valid: bits of 1s, followed by bits of zeros
		$ip4_netmask = ip4_to_decimal $ip4_netmask;
		my $ip4_netmask_str = sprintf("%032b", $ip4_netmask);

		# call an invalid netmask 'not a match', regardless of comparator
		log_msg 0, "invalid netmask in ip4 match: '$ip4_netmask_str'" if ($ip4_netmask_str !~ /^1*0*$/);
		return 0 if ($ip4_netmask_str !~ /^1*0*$/);

		$key_ip4 = ip4_to_decimal $key_ip4;
		my $ip4_range_low = ip4_to_decimal($ip4_net_addr) & $ip4_netmask;
		my $ip4_range_high = $ip4_range_low | ($ip4_netmask ^ 0xffffffff);

		$ret = ($key_ip4 >= $ip4_range_low and $key_ip4 <= $ip4_range_high) ? 1 : 0;
		return $ret ^ $negate;
        } elsif (($ip4_net_addr, my $prefix) = $match_str =~ "^($ip4_cidr_re)\$") {
		log_msg 2, "ip4 match is ip/prefix (cidr)";

		# invalid prefix results in 'not a match', regardless of comparator
		log_msg 0, "invalid prefix in ip4 match: $prefix" if $prefix > 32;
		return 0 if $prefix > 32;

		$key_ip4 = ip4_to_decimal $key_ip4;
		my $ip4_range_low = ip4_to_decimal $ip4_net_addr;
		my $bits_remaining = 32 - $prefix;
		my $ip4_range_high = $ip4_range_low + 2**$bits_remaining - 1;

		$ret = ($key_ip4 >= $ip4_range_low and $key_ip4 <= $ip4_range_high) ? 1 : 0;
		return $ret ^ $negate;
	}
	log_msg 0, "ip4 match didn't match any known format";

	return 0;
}

openlog($log_ident, 'ndelay,pid', 'daemon'); # or die "Could not open syslog: $!"; #?
log_msg 1, "$log_ident vers $helper_version";

if ($#ARGV ne 0) {
	log_msg 0, "USAGE: $0 <keyid>";
#	printf "USAGE: $0 <keyid>";
	exit -1;
}
$keyid = $ARGV[0];


# no config file?  just execute with default options
exec_upcall if (! -e $helper_conf);

my $key_description_str = get_key_description $keyid;
if ($key_description_str !~ $key_description_re) {
	log_msg 0, "could not match key description to known format: $key_description_str";
	log_msg 1, "executing upcall with default parameters";
	exec_upcall;
}
($vars{'uid'}, $vars{'gid'}, $vars{'perms'}, $vars{'hostname'}, $vars{'ipv'}, $vars{'ip'},
	$vars{'sec'}, $vars{'uid2'}, $vars{'creduid'}, $vars{'username'}, $vars{'upcall_target'}) =
	$key_description_str =~ $key_description_re;

$vars{'uid2'} = scalar POSIX::strtol($vars{'uid2'}, 16);
$vars{'creduid'} = scalar POSIX::strtol($vars{'creduid'}, 16);
$vars{'username'} = '' if !defined $vars{'username'};
$vars{'upcall_target'} = '' if !defined $vars{'upcall_target'};
log_msg 1, sprintf("description for key %d  uid: %d, gid: %d, perms: %d, hostname: %s, ipv: %s, ip: %s, sec: %s, uid2: %d, creduid: %d, username: %s, upcall_target: %s",
	$keyid, $vars{'uid'}, $vars{'gid'}, $vars{'perms'},
	$vars{'hostname'}, $vars{'ipv'}, $vars{'ip'},
	$vars{'sec'}, $vars{'uid2'}, $vars{'creduid'}, $vars{'username'}, $vars{'upcall_target'});


## open and read criteria file /etc/cifs-upcall-helper.conf
open CONF, '<', $helper_conf or die "Can't open $helper_conf: $!";
while (<CONF>) {
	my $line = $_;
	chomp $line;

	next if ($line eq '' or substr($line, 0, 1) eq '#');

	if ($line !~ $conf_split_re) {
		log_msg 0, "unparseable line in $helper_conf: $line";
		next;
	}
	my ($criteria_str, $opts_str) = $line =~ $conf_split_re;

	if ($criteria_str eq 'verbosity' or $criteria_str eq 'log_level' or
		$criteria_str eq 'logging' or $criteria_str eq 'debug') {
		if ($opts_str eq 'errors' or $opts_str eq 'quiet' or $opts_str eq '0') {
			$debug_level = 0;
		} elsif ($opts_str eq 'info' or $opts_str eq '1') {
			$debug_level = 1;
		} elsif ($opts_str eq 'debug' or $opts_str eq '2') {
			$debug_level = 2;
		} else { # don't change log level
			log_msg 0, "unrecognized log level: $opts_str";
		}
		next;
	}
	if ($criteria_str eq 'default' or $criteria_str eq 'defaults') {
		%upcall_opts = ();
		set_upcall_opts $opts_str;
		next;
	}

	my $match = 1;

	my @criterion_ary = split /$split_char/, $criteria_str;
	foreach my $criterion (@criterion_ary) {
		last if $match == 0;

		my ($field, $comparator, $match_pattern);

		if ($criterion eq '*') { next; } # '*' is always true
		elsif (($field, $comparator, $match_pattern) = $criterion =~ $string_comparison_re) {
			if ($field eq 'host') {
				$match = 0 if (! check_string_match($vars{'hostname'}, $comparator, $match_pattern));
			} elsif ($field eq 'user') {
				$match = 0 if (! check_string_match($vars{'username'}, $comparator, $match_pattern));
			} elsif ($field eq 'sec') {
				$match = 0 if (! check_string_match($vars{'sec'}, $comparator, $match_pattern));
			} else { # if ($field eq 'upcall_target')
				$match = 0 if (! check_string_match($vars{'upcall_target'}, $comparator, $match_pattern));
			}
		} elsif (($field, $comparator, $match_pattern) = $criterion =~ $uid_comparison_re) {
			if ($field eq 'uid') {
				$match = 0 if (! check_uid_match($vars{'uid2'}, $comparator, $match_pattern));
			} else { # ($field eq 'creduid')
				$match = 0 if (! check_uid_match($vars{'creduid'}, $comparator, $match_pattern));
			}
		} elsif (($comparator, $match_pattern) = $criterion =~ $ip4_comparison_re) {
			$match = 0 if (! check_ip4_match($vars{'ip'}, $comparator, $match_pattern));
		} elsif (($field, $comparator, $match_pattern) = $criterion =~ $ip6_comparison_re) { #
			$match = 0 if (! check_string_match($vars{'ip'}, $comparator, $match_pattern));
		} else {
			log_msg 0, "unrecognized match string: $criterion";
			$match = 0;
			last;
		}
	}
	if ($match) {
		log_msg 1, "matched '$criteria_str'";
		set_upcall_opts $opts_str; # similar to defaults, but don't clear first
		exec_upcall;
	}
}

log_msg 1, "no keyid matched; executing upcall with default parameters";
exec_upcall;
