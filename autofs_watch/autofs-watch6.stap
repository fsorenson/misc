#include <linux/namei.h>
#include <linux/sched.h>


function IS_ROOT:long(dentry:long)
{
	return (@cast(dentry, "dentry")->d_parent == dentry)
}

function d_name:string(dentry:long)
{
	len = @cast(dentry, "dentry")->d_name->len;
	return kernel_string_n(@cast(dentry, "dentry")->d_name->name, len);
}

function prepend:string(dentry:long,name:string)
{
	dname = d_name(dentry)

	/*
	 * In case we are following down a mount point trigger, we can get
	 * multiple instances of a root mount.
	 */
	c = substr(name, strlen(name)-1, strlen(name)-1)
	if (dname == "/" && c == "/")
		return name;

	return sprintf("%s/%s", dname, name);
}

function get_current_root:long()
%{
	THIS->__retvalue = (long)&current->fs->root;
	return;
%}


function nameidata_to_dentry:long(nd:long)
%{
	struct nameidata *nd = (struct nameidata *)(long)THIS->nd;
#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,25)
	THIS->__retvalue = (long)nd->dentry;
#else
	THIS->__retvalue = (long)nd->path.dentry;
#endif
%}

function nameidata_to_vfsmount:long(nd:long)
%{
	struct nameidata *nd = (struct nameidata *)(long)THIS->nd;
#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,25)
	THIS->__retvalue = (long)nd->mnt;
#else
	THIS->__retvalue = (long)nd->path.mnt;
#endif
%}

/*
 * This function walks backwards from dentry and constructs a path name.
 * It will *not* cross mount points.
 */
function reverse_path_walk:string(dentry:long)
{
	while(1) {
		name = prepend(dentry, name);
		dentry = @cast(dentry, "dentry")->d_parent;
		if (IS_ROOT(dentry))
			return name;
	}
}

/*
 * This function mimcs the kernel's internal d_path function.
 */
function d_path:string(nd:long)
{
	root = get_current_root()
	dentry = nameidata_to_dentry(nd)
	vfsmnt = nameidata_to_vfsmount(nd)

	while (1) {
		if (dentry == @cast(root, "path")->dentry &&
		    vfsmnt == @cast(root, "path")->mnt)
			break;

		if (dentry == @cast(vfsmnt, "vfsmount")->mnt_root ||
		    IS_ROOT(dentry)) {
			/* Global root? */
			if (@cast(vfsmnt, "vfsmount")->mnt_parent == vfsmnt)
				return sprintf("/%s", name);

			dentry = @cast(vfsmnt, "vfsmount")->mnt_mountpoint;
			vfsmnt = @cast(vfsmnt, "vfsmount")->mnt_parent;
			continue;
		}
		name = prepend(dentry, name);
		dentry = @cast(dentry, "dentry")->d_parent;
	}

	return sprintf("/%s", name);
}

probe module("autofs4").function("autofs4_lookup")
{
	/*
	 * Don't log automounts travels in its own directory hierarchy, as
	 * they are treated differently, and certainly not something that is
	 * useful for admins to see.
	 */
	if (!isinstr(execname(), "automount")) {
		printf("%s process %s[%d] looking up %s%s\n",
		       ctime(gettimeofday_s()), execname(), pid(),
		       d_path($nd), d_name($dentry));
	}
}

probe module("autofs4").function("autofs4_follow_link")
{
	if (!isinstr(execname(), "automount")) {
		/*
		 * dentry->d_name will be '/' for the mount trigger.  Thus,
		 * the path that the trigger lives on is one level up the
		 * directory stack, and the root of that is yet another level
		 * up.
		 */
		printf("%s process %s[%d] following mount trigger %s\n",
		       ctime(gettimeofday_s()), execname(), pid(),
		       d_path($nd));
	}
}

/*
probe module("autofs4").function("autofs4_expire_direct").return
{
	if ($return != 0) {
		relative_path =	reverse_path_walk($mnt->mnt_mountpoint)
		root_path = reverse_path_walk($mnt->mnt_parent->mnt_mountpoint)
		printf("%s process %s[%d] expiring direct mount /%s/%s\n",
		       ctime(gettimeofday_s()), execname(), pid(),
		       root_path, relative_path)
	}
}
probe module("autofs4").statement("autofs4_expire_direct@fs/autofs4/expire.c+17") ?
{
	relative_path =	reverse_path_walk($mnt->mnt_mountpoint)
	root_path = reverse_path_walk($mnt->mnt_parent->mnt_mountpoint)
	printf("%s process %s[%d] expiring direct mount /%s/%s\n",
	       ctime(gettimeofday_s()), execname(), pid(),
	       root_path, relative_path)
}
*/

probe module("autofs4").function("autofs4_expire_indirect").return
{
	if ($return != 0) {
		relative_path = reverse_path_walk($return)
		root_path = reverse_path_walk($mnt->mnt_mountpoint)
		printf("%s process %s[%d] expiring indirect mount /%s%s\n",
		       ctime(gettimeofday_s()), execname(), pid(),
		       root_path, relative_path)
	}
}

/*
 * The struct dentry's name may be '/' if this is a mount trigger, which
 * is not really something that is useful to print out.  Instead, we just
 * indicate whether a mount or umount succeeded or failed.  Coupled with the
 * messages printed out when looking up a directory and traversing a symlink,
 * this should be relatively easy to correlate to the appropriate directory.
 */
probe module("autofs4").function("autofs4_wait").return
{
	if ($notify > 0) {
		dname = d_name($dentry)
		printf("%s %s of %s %s\n",
		       ctime(gettimeofday_s()),
		       ($notify==1?"mount":"unmount"),
		       dname,
		       $return == 0?"succeeded":"failed")
	}
}

