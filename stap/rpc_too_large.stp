##### STAP_BEGIN #####

%{
#include <include/linux/in.h>
#include <linux/tcp.h>
#include <net/sock.h>
#include <net/tcp.h>
#include <net/ip.h>
#include <linux/skbuff.h>
#include <linux/sunrpc/svcsock.h>
%}
global hitcount = 0

function tstamp:string(epochsecs:long, nsec:long) %{ /* pure */
	const time64_t epochsecs = STAP_ARG_epochsecs;
	unsigned long nsec = STAP_ARG_nsec;
	struct tm gmt;

	time64_to_tm(epochsecs, -tz_gmtoff, &gmt);
	snprintf(STAP_RETVALUE, MAXSTRINGLEN, "%04ld-%02d-%02d %02d:%02d:%02d.%06lu",
		gmt.tm_year + 1900, gmt.tm_mon + 1, gmt.tm_mday,
		gmt.tm_hour, gmt.tm_min, gmt.tm_sec, nsec / 1000);
%}
function tstamp_now() {
	s = gettimeofday_ns()
	ns = s % 1000000000
	s = s / 1000000000
	return tstamp(s, ns)
}
function output(msg) {
	tmp_msg = sprintf("%s(%d) %s()%s", execname(), tid(), ppfunc(), msg)
### print to dmesg
	printk(3, tmp_msg)
### print to systemtap out
#	printf("%s %s\n", tstamp_now(), tmp_msg) # with tstamp
}

function svc_sock_reclen(svsk) %{ /* pure */
	struct svc_sock *svsk = (struct svc_sock *)STAP_ARG_svsk;
	STAP_RETVALUE = ntohl(svsk->sk_marker) & RPC_FRAGMENT_SIZE_MASK;
%}

probe module("sunrpc").statement("svc_tcp_read_marker@net/sunrpc/svcsock.c+25") {
	serv = $svsk->sk_xprt->xpt_server
	sv_max_mesg = serv->sv_max_mesg

	marker = ntohl($svsk->sk_marker)
	reclen = svc_sock_reclen($svsk)

	if (reclen + $svsk->sk_datalen <= sv_max_mesg)
		next

	sk_sk = $svsk->sk_sk ### 'struct sock'

	family = sk_sk->__sk_common->skc_family
	# addresses and ports
	skc_addr = sk_sk->__sk_common->skc_rcv_saddr
	skc_port = sk_sk->__sk_common->skc_num
	skc_daddr = sk_sk->__sk_common->skc_daddr
	skc_dport = sk_sk->__sk_common->skc_dport
	addr_port = sprintf("%s:%d", format_ipaddr(skc_addr, family), skc_port)
	daddr_dport = sprintf("%s:%d", format_ipaddr(skc_daddr, family), skc_dport)

	output(sprintf(": overlength %s rpc: %d (0x%08x) - remote: %s -> local: %s",
		kernel_string(serv->sv_program->pg_name), marker, marker,
		daddr_dport, addr_port))

	if (++hitcount >= 10) {
		output(sprintf(" hit the probe %d times; exiting", hitcount))
		exit()
	}
}

probe begin {
	output(sprintf(": probe starting"))
}
probe end {
	output(sprintf(": probe exiting"))
}
