#!/usr/bin/perl -w

#use strict;
use warnings;
use Fcntl;

use constant (
	false => 0,
	true => 1,
);

$|++;

my $save = true;
my $savedir;
my $VERBOSITY = 0;

my @spinner = ( '|', '/', '-', '\\', '|', '/', '-', '\\' );
my $line_count = -1;
my $spinner_num = 0;

my %pats = (
	'rpc_dir' => '(?:[01])',
	'number' => '(?:[0-9]+)',
	'hex_digit' => '(?:[0-9a-f])',
);
%pats = (%pats,
	'hex_byte' => "(?:$pats{'hex_digit'}\{2})",
);
%pats = (%pats,
	'hex8' => "(?:0x(?:$pats{'hex_byte'}){4})",
);
%pats = (%pats,
	'hex8_list' => "(?:(?:$pats{'hex8'})(?:,$pats{'hex8'})*)",
	'xid' => $pats{'hex8'},
	'fhash' => $pats{'hex8'},
);
%pats = (%pats,
	'rpc_dir_list' => "(?:(?:$pats{'rpc_dir'})(?:,$pats{'rpc_dir'})*)",
	'number_list' => "(?:(?:$pats{'number'})(?:,$pats{'number'})*)",

#	'fhash_list' => "(?:(?:$pats{'fhash'})(?:,$pats{'fhash'})*)",
	'xid_list' => $pats{'hex8_list'},
	'fhash_list' => $pats{'hex8_list'},
#	'hex_string' => "(?:(?:$pats{'hex_digits'})+)",
	'hex_string' => "(?:(?:$pats{'hex_byte'})+)",
	'nfs_name' => '(?:[^\s]+)',
);
%pats = (%pats,
#	'frame' => '[0-9]+',
#	'procedure_v3' => '(?:[0-9]+)',
	'frame' => $pats{'number'},
	'procedure_v3' => $pats{'number'},
	'procedure_v3_list' => $pats{'number_list'},
	'offset_list' => $pats{'number_list'},
	'count_list' => $pats{'number_list'},
	'hex_string_list' => "(?:(?:$pats{'hex_string'})(?:,$pats{'hex_string'})*)",
	'nfs_name_list' => "(?:(?:$pats{'nfs_name'})(?:,$pats{'nfs_name'})*)",
);
%pats = (%pats,
#	'procedure_v3_list' => "(?:$pats{'procedure_v3'})(?:,$pats{'procedure_v3'})*",
);

#%pats = (%pats,
#%pats = (%pats, 
#	'fhash' => '(?:(?:0x[0-9a-f]{8})(?:,



# frame.number nfs.procedure_v3 nfs.fh.hash nfs.name nfs.offset3 nfs.count3 nfs.data) 'nfs.name && nfs.procedure_v3==write && rpc.msgtyp==0' >file.pcap3-deets &
#tshark -2n -r file.pcap3.gz $(tshark_fields frame.number nfs.procedure_v3 nfs.fh.hash nfs.name nfs.write.offset nfs.data) 'nfs.name && nfs.procedure_v3==write && rpc.msgtyp==0' >file.pcap3 &
#my $line_re = qr/^([0-9]+)\s(.*)\s([0-9a-fx,]+)\s([^\s]+)\s([0-9,]+)\s([0-9,]+)\s([0-9a-f,]+)$/;
#my $z_re = qr/^((?:(?:(?:0x(?:(?:(?:[0-9a-f])\{2}){4}))(?:,(?:0x(?:(?:(?:[0-9a-f])\{2}){4}))*))$/

# tshark -2n -r file.pcap3.gz $(tshark_fields frame.number rpc.xid rpc.msgtyp nfs.procedure_v3 nfs.fh.hash nfs.name nfs.offset3 nfs.count3 nfs.data) 'nfs' >file.pcap3-all_nfs

if (scalar @ARGV != 1) {
	printf "usage: save_nfs_files <filename.pcap>\n";
	exit;
}


my $pcap_name = $ARGV[0];

my $fh;
my $stdin_pipe = 0;

my @tshark_fields = qw( frame.number rpc.xid rpc.msgtyp nfs.procedure_v3 nfs.fh.hash nfs.name nfs.offset3 nfs.count3 nfs.data );

if (! -t STDIN) {
	$stdin_pipe = 1;
	$fh = \*STDIN;
	$savedir = "nfs_savefiles";
} else {
	if (! -e $pcap_name) {
		printf "file '%s' does not exist\n", $pcap_name;
		exit;
	}

	my $tshark_cmd = "tshark -2n -r $pcap_name -Tfields -E header=n ";
	for my $field (@tshark_fields) {
		$tshark_cmd .= " -e $field";
	}
	$tshark_cmd .= " nfs 2>&1 |";

	open $fh, $tshark_cmd || die "failed to execute tshark: $!\n";
	$savedir = "$pcap_name.savefiles";
}

mkdir $savedir if $save;

my $line_re = qr/^($pats{'frame'})\s($pats{'xid_list'})\s($pats{'rpc_dir_list'})\s($pats{'procedure_v3_list'})?\s($pats{'fhash_list'})\s($pats{'nfs_name_list'})?\s($pats{'offset_list'})?\s($pats{'count_list'})?\s($pats{'hex_string_list'})?$/;

my %rpc_msgtyp_names = (
	0 => "Call",
	1 => "Reply",
);

my %procedure_names = (
	0 => "NULL",
	1 => "GETATTR",
	2 =>"SETATTR",
	3 =>"LOOKUP",
	4 =>"ACCESS",
	5 =>"READLINK",
	6 =>"READ",
	7 =>"WRITE",
	8 =>"CREATE",
	9 =>"MKDIR",
	10 =>"SYMLINK",
	11 =>"MKNOD",
	12 =>"REMOVE",
	13 =>"RMDIR",
	14 =>"RENAME",
	15 =>"LINK",
	16 =>"READDIR",
	17 =>"READDIRPLUS",
	18 =>"FSSTAT",
	19 =>"FSINFO",
	20 =>"PATHCONF",
	21 =>"COMMIT",
);
my %expected_call_names = (
	'GETATTR' => 1,
	'SETATTR' => 1,
	'LOOKUP' => 3, # guess - failure will have 0-1; success will have 2-3
	'ACCESS' => 1,
	'READLINK' => 2, # guess
	'READ' => 1,
	'WRITE' => 1,
	'CREATE' => 3,
	'MKDIR' => 2,
	'SYMLINK' => 2, # guess
	'MKNOD' => 2, # guess
	'REMOVE' => 1, # unknown
	'RMDIR' => 2, # guess
	'RENAME' => 4, # guess
	'LINK' => 0, # unknown
	'READDIR' => 1, #
	'READDIRPLUS' => 1, #
	'FSSTAT' => 0, # guess
	'FSINFO' => 0, # guess
	'PATHCONF' => 0, # guess
	'COMMIT' => 1, # guess
);
my %expected_reply_names = (
	'GETATTR' => 1,
	'SETATTR' => 1,
	'LOOKUP' => 3, # guess - failure will have 0-1; success will have 2-3
	'ACCESS' => 1,
	'READLINK' => 2, # guess
	'READ' => 1,
	'WRITE' => 1,
	'CREATE' => 2,
	'MKDIR' => 2,
	'SYMLINK' => 2, # guess
	'MKNOD' => 2, # guess
	'REMOVE' => 1, # unknown
	'RMDIR' => 2, # guess
	'RENAME' => 4, # guess
	'LINK' => 0, # unknown
	'READDIR' => 1000, # variable
	'READDIRPLUS' => 1000, # variable
	'FSSTAT' => 0, # guess
	'FSINFO' => 0, # guess
	'PATHCONF' => 0, # guess
	'COMMIT' => 1, # guess
);

#00000000  38 38 31 34 09  09 30 78  32 37 38 38 63 65 33 36  |8814..0x2788ce36|
#00000010  09 73 74 72 61 63 65 2e  6f 75 74 2e 31 35 34 38  |.strace.out.1548|
#00000020  39 33 09 30 09 36 35 35  33 36 09 33 30 33 38 33  |93.0.65536.30383|
#00000030  61 33 30 33 32 33 61 33  34 33 32 32 65 33 35 33  |a30323a34322e353|
#00000040  33 33 36 33 37 33 32 33  33 32 30 36 35 37 38 36  |3363732332065786|
#00000050  35 36 33 37 36 36 35 32  38 32 32 32 66 36 38 36  |563766528222f686|

my %fds;
my %files_created;
my %read_offsets;

sub split_str {
	my $str = shift;
	return defined($str) ? split(/,/, $str) : ();
}

sub check_expected_names {
	my $msgtyp = shift;
	my $name_count = shift;
	my @procedures = @_;
	my $expected_name_count = 0;

	if ($msgtyp == 0) { # call
		for my $proc_num (@procedures) {
			my $proc = $procedure_names{$proc_num};
			$expected_name_count += $expected_call_names{$proc};
		}
	} else {
		for my $proc_num (@procedures) {
			my $proc = $procedure_names{$proc_num};
			$expected_name_count += $expected_reply_names{$proc};
		}
	}
#	return true if $expected_name_count == $name_count;
	return 1 if $expected_name_count == $name_count;
	return false;
}

while (<$fh>) {
	chomp;
	my $line = $_;


	if ($line_count % 1000 == 0) {
		printf "%s\r", $spinner[$spinner_num];
		$spinner_num = ($spinner_num + 1) % (scalar @spinner);
	}
	$line_count++;

	if (my ($frame_num, $rpc_xids_str, $rpc_msgtyps_str, $procedures_str, $fhs_str, $names_str, $offsets_str, $lengths_str, $datas_str) = $line =~ $line_re) {
#		printf "frame %d: %s\n", $frame_num, $line;
		printf "frame %d:\n", $frame_num if $VERBOSITY >= 1;

		my @rpc_msgtyps = split_str($rpc_msgtyps_str);
		my @rpc_xids = split_str($rpc_xids_str);
		my @procedures = split_str($procedures_str);
		my @fhs = split_str($fhs_str);
		my $fhs_i = 0;
		my @names = split_str($names_str);
		my $names_i = 0;
		my @offsets = split_str($offsets_str);
		my $offsets_i = 0;
		my @lengths = split_str($lengths_str);
		my $lengths_i = 0;
		my @datas = split_str($datas_str);
		my $datas_i = 0;

#		printf "  %d msgtyps (%s), %d procedures (%s)\n", scalar @rpc_msgtyps, $rpc_msgtyps_str, scalar @procedures, $procedures_str;

		my $names_are_valid = check_expected_names($rpc_msgtyps[0], scalar @names, @procedures);
#		my $expected_names = get_expected_names($msgtyp, 
		for (my $i = 0 ; $i < scalar @rpc_msgtyps ; $i++) {
			my $xid = $rpc_xids[$i];
			my $msgtyp = $rpc_msgtyps[$i];
			my $proc_num = $procedures[$i];
			my $proc = $procedure_names{$proc_num};

			printf "    (%d)%s (%d)%s", $proc_num, $proc, $msgtyp, $rpc_msgtyp_names{$msgtyp} if $VERBOSITY >= 0;
			if ($rpc_msgtyps[$i] == 0) { # Call
				if ($proc eq 'WRITE') {
					my $name;
					my $length = $lengths[$lengths_i];
					my $offset = $offsets[$offsets_i];

					$name = ($names_are_valid && defined($names[$names_i])) ? $names[$names_i] : $fhs[$fhs_i];

					printf "    %s - WRITE %d bytes at offset %d\n", $name, $length, $offset if $VERBOSITY >= 1;

					if ($save) {
						my $write_fd;

						if (! defined($files_created{$name})) {
							sysopen($write_fd, $savedir . "/" . $name, O_RDWR|O_CREAT|O_TRUNC, 0644) or die "unable to create file $savedir/$name: $!";
							$files_created{$name} = 1;
						} else {
							sysopen($write_fd, $savedir . "/" . $name, O_RDWR, 0640) or die "unable to open file $savedir/$name: $!";
						}

						seek($write_fd, $offset, 0);
						my $data = pack "H*", $datas[$datas_i];

						syswrite($write_fd, $data);

						close($write_fd);
					}
					$fhs_i++;
					$names_i++;
					$lengths_i++;
					$offsets_i++;
					$datas_i++;
				} elsif ($proc eq 'READ') { # need to save the offset, based on the xid
#					my $name = $names_are_valid ? $names[$names_i] : $fhs[$fhs_i];
#					my $length = $lengths[$lengths_i];
					my $offset = $offsets[$offsets_i];
					$read_offsets{$xid} = $offset;

				} else {
					$names_i += $expected_call_names{$proc};
				}

			} else { # Reply
				if ($proc eq 'READ') {
					my $name = ($names_are_valid && defined($names[$names_i])) ? $names[$names_i] : $fhs[$fhs_i];
					#= $names_are_valid ? $names[$names_i] : $fhs[$fhs_i];


					if (defined($read_offsets{$xid})) {
						my $offset = $read_offsets{$xid};
						my $length = $lengths[$lengths_i];

						undef $read_offsets{$xid};

						printf "    %s - READ %d bytes from offset %d\n", $name, $length, $offset if $VERBOSITY >= 0;


						if ($save) {
							my $write_fd;

							if (! defined($files_created{$name})) {
								sysopen($write_fd, $savedir . "/" . $name, O_RDWR|O_CREAT|O_TRUNC, 0644) or die "unable to create file $savedir/$name: $!";
								$files_created{$name} = 1;
							} else {
								sysopen($write_fd, $savedir . "/" . $name, O_RDWR, 0640) or die "unable to open file $savedir/$name: $!";
							}

							seek($write_fd, $offset, 0);
							my $data = pack "H*", $datas[$datas_i];

							syswrite($write_fd, $data);

							close($write_fd);
						}
						$fhs_i++;
						$names_i++;
						$lengths_i++;
						$offsets_i++;
						$datas_i++;
					} else {
						printf "unknown read offset for xid %s\n", $xid;
					}
				} else {
					printf "%s is not a read reply\n", $proc;
				}

			}

			printf "\n" if $VERBOSITY >= 1;
		}

		next;


#		printf "fhs: %d, names: %d, offests: %d, lengths: %d, datas: %d\n",
#			scalar @fhs, scalar @names, scalar @offsets, scalar @lengths, scalar @datas;

#printf "datas: %s\n", $datas_str;
		my $fhash_positional = 0;
		my $name_positional = 0;
		my $data_positional = 0;
		for (my $i = 0 ; $i < scalar @names ; $i++) {
#			my $procedure = $procedures[$i];

#			if ($procedure == '7') { # write
#				my $name = $names[$name_positional];

#				my $length = $lengths[$data_positional];
#				my $offset = $offsets[$data_positional];

#				printf "    %s - %d bytes at offset %d\n", $name, $length, $offset;

#if ($save) {
#				if (defined($fds{$name})) {
#				printf "fd for %s is %d\n", $name, $fds{$name};
#				} else {
#					sysopen($fds{$name}, $savedir . "/" . $name, O_RDWR|O_TRUNC|O_CREAT, 0644) or die("unable to create file $savedir/$name: $!");
#				printf "no fd for %s\n", $name;
#				}

#				seek($fds{$name}, $offset, 0);
#				my $data = pack "H*", $datas[$data_positional];

#				syswrite($fds{$name}, $data);
}
#
#				$fhash_positional++;
#				$name_positional++;
#				$data_positional++;
#			} elsif ($procedure == '3') { # LOOKUP
#				$fhash_positional++;
#				$name_positional += 2;
#			} elsif ($procedure == '4') { # ACCESS
#				$fhash_positional++;
#			} elsif ($procedure == '1') { # GETATTR
#				$fhash_positional++;
#			} else {
#				printf "not sure what to do with procedure %d\n", $procedure;
#			}
#		}
	} else {
		printf "did not match regex: %s\n", $line;
	}
};
