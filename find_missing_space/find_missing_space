#!/usr/bin/perl -w

# Frank Sorenson <sorenson@redhat.com>, 2021

use strict;
use warnings;

use constant { MS_BIND => 4096 };
use constant { false => 0, true => 1 };

use Getopt::Long;
use File::Find;
use File::stat;
use File::Temp qw/tempdir/;
use Fcntl ':mode';
use POSIX;
use Cwd 'realpath';
use Data::Dumper;
#require "unistd.ph";
require "sys/syscall.ph";

$|++;

my @field_widths = ( 1, 3, 10, 10, 15, 15);
my $inode_print_hdr_fmt =
	' 'x$field_widths[0] .
	' 'x$field_widths[1] . " " .
	' 'x$field_widths[2] . " " .
	'%' . $field_widths[3] . "s" .
	'%' . $field_widths[4] . "s" .
	'%' . $field_widths[5] . "s";
my $inode_print_hdr_str = sprintf("${inode_print_hdr_fmt}\n", "inode", "apparent size", "allocated size");

my $inode_print_fmt = "%" . $field_widths[0] . "s%" . $field_widths[1] . "s " .
	"%" . $field_widths[2] . "s " .
	"%" . $field_widths[3] . "d" .
	"%" . $field_widths[4] . "s" .
	"%" . $field_widths[5] . "s";
my $inode_print_fmt2 = "%" . $field_widths[0] . "s%" . $field_widths[1] . "s" .
	"─"x ($field_widths[2] + $field_widths[3] + $field_widths[4] + $field_widths[5] + 2) . " ";
my $inode_print_fmt_link = " => %s";

my %inode_comparison_strings = (
	'hidden' => '+',
	'deleted' => '-',
	'common' => '=',
	'partial' => '~',
	'mismatched' => '*',
	'unknown' => '?',
);
my %inode_print_lines = (
	'single' => '───',
	'first' => '┌──',
	'also' => '├──',
	'last' => '└──',
);

my %config = (
	'show_deleted' => true,
	'show_hidden' => true,
	'show_partially_hidden' => true,
	'show_mismatched_stats' => true,
	'show_mismatched_paths' => true,
	'show_all' => true,

	'verbose' => 0,
	'do_mount' => true,
	'max_depth' => 300,
);
my %run_data = (
	'tmp_mount_dir' => "",
);

GetOptions(
	'quiet|q' => sub { $config{'verbose'}--; },
	'verbose|v' => sub { $config{'verbose'}++; },
);

sub cleanup {
	if ($config{'do_mount'} && $config{'tmp_mount_dir'} ne "") {
		my $ret = syscall(&SYS_umount2, $config{'tmp_mount_dir'}, 0);
		printf "umount result: $ret\n" if ($ret != 0);

		rmdir($config{'tmp_mount_dir'});
		$config{'tmp_mount_dir'} = "";
	}
}

sub handle_interrupt {
	printf "handling interrupt\n";
	cleanup();
	exit(0);
}
$SIG{'INT'} = 'handle_interrupt';
$SIG{'TERM'} = 'handle_interrupt';
END {
	cleanup();
	exit;
}

sub fs_magic_to_fstype {
	my $magic = shift;
	my %fstype = (
		4989		=> "ext",	# 0x0000137D
		61265		=> "ext2_old",	# 0x0000EF51
		61267		=> "ext2",	# 0x0000EF53
		0xef53		=> "ext3",
		0xef53		=> "ext4",

		0x58465342	=> "xfs",
	);
	return $fstype{$magic} if (defined($fstype{$magic}));
	return "";
}

sub do_statfs {
	my @fields = ('f_type', 'f_bsize', 'f_blocks', 'f_bfree', 'f_bavail', 'f_files', 'f_ffree', 'f_fsid', 'f_namelen', 'f_frsize', 'f_flags');
	my $dir = shift;
	my $buf = '\0'x512;
	my $ret = syscall(&SYS_statfs, $dir, $buf);
	my %stats = ();
	if ($ret == 0) {
		my @parts = unpack "Q10L1", $buf;

		for (my $i = 0 ; $i < scalar(@fields) ; $i++) {
			$stats{$fields[$i]} = $parts[$i];
		}
		$stats{'f_type'} = fs_magic_to_fstype($stats{'f_type'});
		my @tmp = unpack("L2", pack("Q", $stats{'f_fsid'}));
		$stats{'f_fsid'} = \@tmp;
	} else {
		for (my $i = 0 ; $i < scalar(@fields) ; $i++) {
			$stats{$fields[$i]} = '';
		}
	}
	return %stats;
}

sub max_string_len {
	my $max_len = 0;
	while (scalar @_) {
		my $str = shift;
		my $this_len = length($str);
		$max_len = $this_len if ($this_len > $max_len);
	}
	return $max_len;
}
sub max_path_len {
	return max_string_len(@_);
}
sub center_str {
	my $str = shift;
	my $len = shift;

	my $lpad = int(($len - length($str))/2 - 1) - 1;
	my $lpadstr = ($lpad <= 0) ? "" :
		"."x ($lpad - 1) . " ";
	my $rpad = $len - length($str) - length($lpadstr) - 1;
	my $rpadstr = ($rpad <= 0) ? "" :
		" " . "."x ($rpad - 1);

	$str = $lpadstr . $str . $rpadstr;
	$len = $len - 1;
	return sprintf("%-${len}s", $str);
}
sub center_str_old {
	my $str = shift;
	my $len = shift;

	$str = " "x int(($len - length($str))/2 - 1) . $str;
	$len = $len - 1;
	return sprintf("%-${len}s", $str);
}

sub logn {
	my $val = shift;
	my $base = shift;
	return log($val)/log($base);
}
my @unit_strings;
$unit_strings[1000] = [ " bytes", "KB", "MB", "GB", "TB", "PB", "EB", "ZB", "YB" ];
$unit_strings[1024] = [ " bytes", "KiB", "MiB", "GiB", "TiB", "PiB", "EiB", "ZiB", "YiB" ];
sub byte_units {
	my $size = shift;
	my $base = shift;
	my $sigfigs = shift;

	if (!defined($sigfigs)) { $sigfigs = 2; }

	if ($size < $base || !defined($unit_strings[$base])) {
		return sprintf("%d bytes", $size);
	}
	my $i = POSIX::floor(logn($size,$base));
	my $divider = POSIX::pow($base, $i);
	return sprintf("%.*f %s",
		(int($size / $divider) eq ($size / $divider)) ? 0 : $sigfigs, $size / $divider, $unit_strings[$base][$i]);
}

sub mode_type_char {
	my $mode = shift;
	return S_ISREG($mode) ? "-" :
		S_ISDIR($mode) ? "d" :
		S_ISLNK($mode) ? "l" :
		S_ISBLK($mode) ? "b" :
		S_ISCHR($mode) ? "c" :
		S_ISFIFO($mode) ? "p" :
		S_ISSOCK($mode) ? "s" : "?";
}
#my @mode_bits = ('---', '--x', '-w-', '-wx', 'r--', 'r-x', 'rw-', 'rwx');
my @mode_bits = (
	['-', '-', '-'], ['-', '-', 'x'], ['-', 'w', '-'], ['-', 'w', 'x'],
	['r', '-', '-'], ['r', '-', 'x'], ['r', 'w', '-'], ['r', 'w', 'x']);
sub mode_bits_string {
	my $mode = shift;

	my @usr = @{$mode_bits[($mode & S_IRWXU) >> 6]};
	my @grp = @{$mode_bits[($mode & S_IRWXG) >> 3]};
	my @oth = @{$mode_bits[$mode & S_IRWXO]};

	if ($mode & S_ISUID) { $usr[2] = $usr[2] eq 'x' ? 's' : 'S'; }
	if ($mode & S_ISGID) { $grp[2] = $grp[2] eq 'x' ? 's' : 'S'; }
	if ($mode & S_ISVTX) { $oth[2] = $oth[2] eq 'x' ? 't' : 'T'; }
	return join("", @usr, @grp, @oth);
}
sub mode_string {
	return mode_type_char($_[0]) . mode_bits_string($_[0]);
}

sub exec_command {
	my $out = "";

	open EXEC, join(" ", @_) . " 2>&1 |";
	while (<EXEC>) {
		$out .= $_;
	}
	close EXEC;
	return ($? >> 8, $out);
}

sub is_dir {
#	my $mode = shift;
#	return (S_ISDIR($mode) ? 1 : 0);
	return (S_ISDIR($_[0]) ? 1 : 0);
}
sub is_link {
#	my $mode = shift;
#	return (S_ISLNK($mode) ? 1 : 0);
	return (S_ISLNK($_[0]) ? 1 : 0);
}
sub uniq {
	my @list = @_;
	my %seen = ();

	foreach my $item (@list) {
		$seen{$item}++;
	}
	return keys(%seen);
}
sub compare_path_lists {
	my ($hrefa, $hrefb) = @_;
        my %a = %{$hrefa};
        my %b = %{$hrefb};
	my %ret;

	foreach my $path (uniq (keys %a, keys %b)) {
		if ($a{$path} && $b{$path}) {
			$ret{'visible'}{$path} = true;
		} elsif (! $a{$path} && $b{$path}) {
			$ret{'hidden'}{$path} = true;
		} elsif ($a{$path} && ! $b{$path}) { # should not happen, unless a file was deleted between directory scans
#			printf "ERROR...  path '%s' is present in visible tree, but is not found on the underlying filesystem!\n", $path;
			$ret{'deleted'}{$path} = true;
		} else { # uhhh.  whuh?
			printf "ERROR...  path '%s' is somehow present in the list of paths, but does not exist!\n", $path;
		}
	}
	return \%ret;
}

sub compare_arrays {
	my ($aref, $bref) = @_;
	my @a = @{$aref};
	my @b = @{$bref};

	return false if (scalar @a != scalar @b);
	for (my $i = 0 ; $i < scalar @a ; $i++) {
		return false if $a[$i] ne $b[$i];
	}
	return true;
}

sub stats_match {
	my $ltree = shift;
	my $rtree = shift;
	my $inum = shift;

	my %lino = %{$ltree->{'inodes'}->{$inum}};
	my %rino = %{$rtree->{'inodes'}->{$inum}};

	for (my $i = 0 ; $i < 2 ; $i++) {
		return true if (
			($lino{'stats'}->mode == $rino{'stats'}->mode) &&
			($lino{'stats'}->size == $rino{'stats'}->size) &&
			($lino{'stats'}->blocks == $rino{'stats'}->blocks)
		);
		if ($i == 0) {
			$lino{'stats'} = lstat($ltree->{'mount_path'} . $lino{'paths'}[0]);
			$rino{'stats'} = lstat($rtree->{'mount_path'} . $rino{'paths'}[0]);
		}
	}
	return false;
}



# show_inode($orig_tree, $bind_tree, $inum);
sub show_inode {
	my $ltree = shift;
	my $rtree = shift;
	my $inum = shift;

	my %lino = $ltree->{'inodes'}{$inum} ? %{$ltree->{'inodes'}{$inum}} : ();
	my %rino = $rtree->{'inodes'}{$inum} ? %{$rtree->{'inodes'}{$inum}} : ();

	my $show_this_entry = false;
	my %comparison = (
		'deleted' => false,		# in original tree only
						#	show if:
						#		show_all || show_deleted
						#		(don't care about mismatch setting)
		'hidden' => false,		# in bind tree only **** could actually be 'new' instead
						#	show if:
						#		show_all || show_hidden
						#		(don't care about mismatch setting)
		'common' => false,		# in both trees
						# 	check if:
#						# 		show_all ||
#						# 		show_common ||
#						# 		show_mismatched_stats ||
#						# 		show_mismatched_paths
						#	show if:
						#		show_all ||
						#		(mismatched_paths && show_mismatched_paths) ||
						#		(mismatched_stats && show_mismatched_stats)
		'mismatched_paths' => false,	# inode in both trees - path lists don't match,
						#	but all are within visible filesystem
						#	(a file or directory was added or removed)
						#	check if:
						#		show_all && 'common'
						#	set if:
						#		'common' &&
						#		path lists do not match
						#	shown if:
						#		show_all ||
						#		show_mismatched && 'mismatched_paths'
		'partially_hidden' => false,	# inode in both trees -
						#	check if:
						#		'common' && show_all && 'mismatched_paths'
						#	set if:
						#		'common' &&
						#		show_partially_hidden && 
						#		some paths below an overmount
						#	shown if:
						#		show_all ||
						#		('common' && 'mismatched_paths' && (some paths below an overmount)
		'mismatched_stats' => false,	# inode in both trees - 
	);


	my %lpaths = %lino ? %{$lino{'paths'}} : ();
	my %rpaths = %rino ? %{$rino{'paths'}} : ();
	my %paths_comparison; # entries are 'visible', 'hidden', or 'deleted'

	if (%rino && %lino) {
		$comparison{'common'} = true;

#		if ($config{'show_all'} || $config{'show_mismatched_stats'} || $config{'show_mismatched_paths'} || $config{'show_partially_hidden'}) {
			# check/compare paths
			%paths_comparison = %{ compare_path_lists(\%lpaths, \%rpaths) } if ($config{'show_mismatched_paths'});
			$comparison{'mismatched_paths'} = true if (scalar (keys %{$paths_comparison{'hidden'}}, keys %{$paths_comparison{'deleted'}}));
			$comparison{'mismatched_stats'} = stats_match($ltree, $rtree, $inum) ? false : true;
			$show_this_entry = true if (
				($config{'show_mismatched_paths'} && $comparison{'mismatched_paths'}) ||
				($config{'show_mismatched_stats'} && $comparison{'mismatched_stats'})
			);
#		}

		# could possibly be a partially-hidden inode


		$ltree->{'total_size'} += $lino{'stats'}->size;
		$ltree->{'total_blocks'} += $lino{'stats'}->blocks;

		$rtree->{'total_size'} += $rino{'stats'}->size;
		$rtree->{'total_blocks'} += $rino{'stats'}->blocks;
	} elsif (%lino) {
		$comparison{'deleted'} = true;
		$show_this_entry = true if $config{'show_deleted'};

		$ltree->{'total_size'} += $lino{'stats'}->size;
		$ltree->{'total_blocks'} += $lino{'stats'}->blocks;

		$ltree->{'deleted_size'} += $lino{'stats'}->size;
		$ltree->{'deleted_blocks'} += $lino{'stats'}->blocks;
	} elsif (%rino) {
		$comparison{'hidden'} = true; # could actually be new, but there's no way to know... go back & verify, perhaps?
		$show_this_entry = true if $config{'show_hidden'};

		$rtree->{'total_size'} += $rino{'stats'}->size;
		$rtree->{'total_blocks'} += $rino{'stats'}->blocks;

#		$rtree->{'hidden_size'} += $rino{'stats'}->size;
#		$rtree->{'hidden_blocks'} += $rino{'stats'}->blocks;

		for my $overmount_path (keys(%{$ltree->{'overmounts'}})) {

#			printf "checking whether inode %d is on overmounted filesystem %s\n", $inum, $overmount_path;

#			my $re = qr(^($overmount_path)(?:|/)?$?);
			my $re = qr(^($overmount_path)$?);

			if (my @matches = grep($re, keys(%rpaths))) {
#				$rtree->{'hidden_paths'}{$overmount_path}{'total_size'} += $rino{'stats'}->size;
#				$rtree->{'hidden_paths'}{$overmount_path}{'total_blocks'} += $rino{'stats'}->blocks;
				$rtree->{'hidden_size'}{$overmount_path} += $rino{'stats'}->size;
				$rtree->{'hidden_blocks'}{$overmount_path} += $rino{'stats'}->blocks;
				# so...  continue, or add it potentially multiple times? (i.e. overmounted in more than one place)
			}
#			printf "these paths '%s' are on overmount path '%s'\n", join(", ", @matches), $overmount_path;


		}

#		overmounts
#		$orig_tree{'overmounts'}


	}

	$show_this_entry = true if $config{'show_all'};

	return if (! $show_this_entry);


	if ($comparison{'mismatched_stats'}) {
		printf "ERROR: fix mismatched stats: inode %d\n", $inum;
		return;
	}

	my $inode_entry_str = $comparison{'deleted'} ? $inode_comparison_strings{'deleted'} :
		$comparison{'hidden'} ? $inode_comparison_strings{'hidden'} :
		($comparison{'common'} && $comparison{'partially_hidden'}) ? $inode_comparison_strings{'partial'} :
		($comparison{'common'} &&
			($comparison{'mismatched_paths'} || $comparison{'mismatched_stats'})) ? $inode_comparison_strings{'mismatched'} :
		$comparison{'common'} ? $inode_comparison_strings{'common'} : $inode_comparison_strings{'unknown'};


	my @paths = sort(uniq((keys %lpaths, keys %rpaths)));
#	printf "sorted paths: %s\n", join(", ", @paths);

	my $inode_lines_str = scalar @paths == 1 ? $inode_print_lines{'single'} : $inode_print_lines{'first'};

	my $symbolic = mode_string($rino{'stats'}->mode);
	my $size_str = byte_units($rino{'stats'}->size, 1024);
	my $alloc_size_str = byte_units($rino{'stats'}->blocks * 512, 1024);

	printf "${inode_print_fmt}", $inode_entry_str, $inode_lines_str, $symbolic, $inum, $size_str, $alloc_size_str;

	my $first_path = true;
	while (scalar @paths) {
		my $this_path = pop @paths;


		my $path_char = $paths_comparison{'visible'}{$this_path} ? '=' :
			$paths_comparison{'hidden'}{$this_path} ? '+' :
			$paths_comparison{'deleted'}{$this_path} ? '-' :
			! %lino ? '+' :
			'?';
		if ($first_path) {
			printf " %s %s%s\n", $path_char, $this_path, is_link($rino{'stats'}->mode) ? " => " . $rino{'link_target'} : "";
			$first_path = false;
		} else {
			printf "${inode_print_fmt2}%s %s\n", $inode_entry_str, $inode_lines_str, $path_char, $this_path;
		}
		$inode_entry_str = ' ';
		$inode_lines_str = (scalar @paths > 1) ? $inode_print_lines{'also'} : $inode_print_lines{'last'};
	}
}

if (!defined($ARGV[0])) {
	$ARGV[0] = ".";
}

# add_path($tree_ptr, $full_path)
sub add_path {
	my $current_tree_ptr = shift;
	my $full_path = shift;

	my $path = $full_path;
	my $stats = lstat($path);

	return if (!$stats); # file/dir does not exist

	if (length($current_tree_ptr->{'mount_path'}) > length($path)) {
		printf "path (%s) is a substring of base_path (%s)\n", $path, $current_tree_ptr->{'mount_path'};
		return;
	}
	if ($current_tree_ptr->{'mount_path'} ne "/") {
		$path =~ s#^$current_tree_ptr->{'mount_path'}##;
	}
	$path = "/" if (!defined($path) || $path eq "");
	while (substr($path, 0, 2) eq "//") { $path = substr($path, 1); }
	$path =~ s@//@/@;


	if ($current_tree_ptr->{'search_dev'} ne $stats->dev) {
		printf "add_path: adding '%s' to overmounts\n", $path if ($config{'verbose'} >= 1);
		$current_tree_ptr->{'overmounts'}->{$path} = $stats->dev;

		$File::Find::prune = 1;
		return;
	}

	printf "add_path: adding '%s' (inode # %d)\n", $path, $stats->ino if ($config{'verbose'} >= 1);

	my @path_elements = split('/', substr($path, 1));
	$File::Find::prune = 1 if (scalar @path_elements > $config{'max_depth'});

	$current_tree_ptr->{'paths'}{$path} = $stats->ino;
	if (! defined($current_tree_ptr->{'inodes'}->{$stats->ino})) {
		$current_tree_ptr->{'inodes'}->{$stats->ino}->{'stats'} = $stats;
		$current_tree_ptr->{'inodes'}->{$stats->ino}->{'link_target'} = readlink $full_path if is_link($stats->mode);
	}
	$current_tree_ptr->{'inodes'}->{$stats->ino}->{'paths'}->{$path} = 1;
}
sub remove_inode {
	my $tree_ptr = shift;
	my $inum = shift;

	my @paths = $tree_ptr->{'inodes'}->{$inum}->{'paths'};
	for my $path (@paths) {
		undef $tree_ptr->{'paths'}->{$path};
	}
	undef $tree_ptr->{'inodes'}->{$inum};
}

sub scan_filesystem {
	my $base_dir = shift;
	my $dir_stats = lstat($base_dir);

	my %current_tree = (
		'overmounts' => {},
		'inodes' => {},
		'paths' => {},

		'mount_path' => $base_dir,
		'search_dev' => $dir_stats->dev,

		'total_size' => 0,
		'hidden_size' => {},
		'total_blocks' => 0,
		'hidden_blocks' => {},
	);
	printf "searching base dir: '%s'\n", $base_dir;

	find( {
		wanted => sub {
			add_path(\%current_tree, $File::Find::name);
		},
		no_chdir => 1
	}, $base_dir);
	return \%current_tree;
}

sub check_inodes {
	my %l = %{$_[0]};
	my %r = %{$_[1]};

	if (0 && !defined($l{'name'})) {
		printf "'name' is not defined?\n";
		print Dumper(\%l);
		exit;
	}

	return false if ($l{'stats'}->mode != $r{'stats'}->mode);

	if ($l{'stats'}->size != $r{'stats'}->size) {
		printf "size differs?\n";
		return false;
	}

	return true;
}
sub all_ipaths0 {
	my $ltree = shift;
	my $rtree = shift;
	my $inum = shift;

#	my %lino = $ltree->{'inodes'}->{$inum} ? %{$ltree->{'inodes'}->{$inum}} : ();
#	my %lpaths = %lino ? %{$lino{'paths'}} : ();

	my %lpaths = $ltree->{'inodes'}->{$inum} ? %{$ltree->{'inodes'}->{$inum}->{'paths'}} : ();

#	my %rino = %{$rtree->{'inodes'}->{$inum}};
#	my %rino = $rtree->{'inodes'}->{$inum} ? %{$rtree->{'inodes'}->{$inum}} : ();
#	my %rpaths = %rino ? %{$rino{'paths'}} : ();
	my %rpaths = $rtree->{'inodes'}->{$inum} ? %{$rtree->{'inodes'}->{$inum}->{'paths'}} : ();
	return sort uniq (
#		keys ( %lino ? %{$lino{'paths'}} : () ),
#		keys ( %rino ? %{$rino{'paths'}} : () )
		keys %lpaths, keys %rpaths
	);
}
sub all_ipaths1 {
	my $ltree = shift;
	my $rtree = shift;
	my $inum = shift;

#	my %lpaths = $ltree->{'inodes'}->{$inum} ? %{$ltree->{'inodes'}->{$inum}->{'paths'}} : ();
#	my %rpaths = $rtree->{'inodes'}->{$inum} ? %{$rtree->{'inodes'}->{$inum}->{'paths'}} : ();
	return sort uniq(
#		$ltree->{'inodes'}->{$inum} ? %{$ltree->{'inodes'}->{$inum}}{'paths'} : %{()},
#		$rtree->{'inodes'}->{$inum} ? %{$rtree->{'inodes'}->{$inum}}{'paths'} : ()
#		keys %lpaths,
#		keys %rpaths
		$ltree->{'inodes'}->{$inum} ? keys %{$ltree->{'inodes'}->{$inum}->{'paths'}} : (),
		$rtree->{'inodes'}->{$inum} ? keys %{$rtree->{'inodes'}->{$inum}->{'paths'}} : (),
	);
}
sub all_ipaths {
	my $ltree = shift;
	my $rtree = shift;
	my $inum = shift;

	return sort uniq(
		$ltree->{'inodes'}->{$inum} ? keys %{$ltree->{'inodes'}->{$inum}->{'paths'}} : (),
		$rtree->{'inodes'}->{$inum} ? keys %{$rtree->{'inodes'}->{$inum}->{'paths'}} : (),
	);
}
sub first_ipath {
	return (all_ipaths($_[0], $_[1], $_[2]))[0];
}

sub compare_inode_info {
	my $orig_tree = shift;
	my $bind_tree = shift;

	my (@left, @overmounts, @partial, @differ, @right);

#	original version
#	my @inums = uniq(keys %{$orig_tree->{'inodes'}}, keys %{$bind_tree->{'inodes'}});

	my @all_inums = uniq(keys %{$orig_tree->{'inodes'}}, keys %{$bind_tree->{'inodes'}});
#	my @inums = sort( {
#			my %alino = %{$orig_tree->{'inodes'}->{$a}};
#			my %alpaths = %alino ? %{$alino{'paths'}} : ();
#			my %arino = %{$bind_tree->{'inodes'}->{$a}};
#			my %arpaths = %arino ? %{$arino{'paths'}} : ();
#			my @apaths = sort(uniq(keys %alpaths, keys %arpaths));
#		my @apaths = all_ipaths($orig_tree, $bind_tree, $a);
#		my @bpaths = all_ipaths($orig_tree, $bind_tree, $b);
#		return $apaths[0] <=> $bpaths[0];
#		return $apaths[0] cmp $bpaths[0];
#	}, (uniq(keys %{$orig_tree->{'inodes'}}, keys %{$bind_tree->{'inodes'}})));
#	}, @all_inums);
	my @inums = sort { first_ipath($orig_tree, $bind_tree, $a) cmp first_ipath($orig_tree, $bind_tree, $b) } @all_inums;
#	my @inums = sort { first_ipath($orig_tree, $bind_tree, $a) cmp first_ipath($orig_tree, $bind_tree, $b) } uniq(keys %{$orig_tree->{'inodes'}}, keys %{$bind_tree->{'inodes'}});


	if ($config{'verbose'} >= 1) {
		printf "left inodes:  %d\n", scalar uniq(keys %{$orig_tree->{'inodes'}});
		printf "right inodes: %d\n", scalar uniq(keys %{$bind_tree->{'inodes'}});
		printf "total inodes: %d\n", scalar @inums;
	}

	if ($config{'verbose'} >= 1) {
		printf "unique inode numbers:\n";
		print Dumper(\@inums);
	}

	printf $inode_print_hdr_str;

	foreach my $inum (@inums) {
		my $l = $orig_tree->{'inodes'}->{$inum};
		my $r = $bind_tree->{'inodes'}->{$inum};

		show_inode($orig_tree, $bind_tree, $inum);

if (1) {
		if ($l && !$r) { # shouldn't happen
			printf "ERROR: left only: %d - %s\n", $inum, $l->{'path'};
			push @left, $inum;
		} elsif ($l && $r) {
			# check sizes, names, etc
			printf "common to both: %d\n", $inum if $config{'verbose'} >= 1;

			my %compared_paths = %{compare_path_lists($l->{'paths'}, $r->{'paths'})};

			my @left_paths = sort keys %{$l->{'paths'}};
			my @right_paths = sort keys %{$r->{'paths'}};
			my $paths_match = compare_arrays(\@left_paths, \@right_paths);
			my $inodes_match = check_inodes($l, $r);

			push @partial, $inum if (! $paths_match);
		} elsif (!$l && $r) {
			printf "right only: %d\n", $inum if ($config{'verbose'} >= 1);
			push @right, $inum;
		} else {
			printf "ERROR: inode number %d does not exist in either tree, but somehow got in here?\n", $inum;
		}
}
	}


#my %result;

#	if (scalar @left) { # this shouldn't happen
#		printf "left tree only: %d\n", scalar @left;
#		printf "left inodes: %d - %s\n",
#			scalar @left, join(" ", @left);
#	}
#	if (scalar @right && $config{'verbose'} >= 0) {
#		printf "right inodes (hidden): %d - %s\n",
#			scalar @right, join(" ", @right);
#	}
#	if (scalar @partial) {
#		printf "partially hidden: %d - %s\n",
#			scalar @partial, join(" ", @partial);
#	}
	printf "\n";
}
sub output_overmount_info {
	my $ltree = shift;
	my $rtree = shift;

	#overmounts
	my @overmounts = keys %{$ltree->{'overmounts'}};

	if (scalar @overmounts) {
		printf "Overmount summary:\n";
		my $overmount_label_width = max_string_len("hidden size", "allocated size");
		my $overmount_size_width = 15;
		foreach my $overmount_path (@overmounts) {
			my $p = $ltree->{'mount_path'} . $overmount_path;
			while (substr($p, 0, 2) eq "//") { $p = substr($p, 1); }       

			printf "  %s\n", $p;
			printf "    %*s: %*s (%s)\n", $overmount_label_width, "hidden size",
				$overmount_size_width, $rtree->{'hidden_size'}{$overmount_path},
				byte_units($rtree->{'hidden_size'}{$overmount_path}, 1024);
			printf "    %*s: %*s (%s)\n", $overmount_label_width, "allocated size",
				$overmount_size_width, $rtree->{'hidden_blocks'}{$overmount_path} * 512,
				byte_units($rtree->{'hidden_blocks'}{$overmount_path} * 512, 1024);

#			$rtree->{'total_hidden_size'} += $rtree->{'hidden_size'}{$overmount_path};
#			$rtree->{'total_hidden_blocks'} += $rtree->{'hidden_blocks'}{$overmount_path};
		}

		printf "\n";
	} else {
		printf "no overmounts\n";
	}
}


for my $dir (@ARGV) {
	my ($ret, $out);
	$dir = Cwd::realpath($dir); # resolve the real path
	my $parent_dir = Cwd::realpath($dir . "/..");

	# check that this is a mountpoint
	my $dir_stats = lstat($dir);

	if ($dir ne $parent_dir) { # if we're not already at the root
		my $parent_dir_stats = lstat($parent_dir);

		if ($dir_stats->dev == $parent_dir_stats->dev) {
			printf "%s is not a mountpoint\n", $dir;
			printf "parent dir is %s\n", $parent_dir;
			printf "stats dev: %d, parent_stats dev: %d\n", $dir_stats->dev, $parent_dir_stats->dev;
			next;
		}
	}

	# look for 'deleted-but-open' files, if possible
	my %statfs = do_statfs($dir);

	if ($statfs{'f_type'} eq "xfs") { # for xfs, we may be able to use xfs_db to find deleted-but-open inodes
	}
	# can we do the same for other filesystems?


	if ($config{'do_mount'}) {
		# get this thing bind-mounted
		$config{'tmp_mount_dir'} = tempdir('find_missing_space.XXXXXX', TMPDIR => 1);
		$ret = syscall(&SYS_mount, $dir, $config{'tmp_mount_dir'}, my $mount_opts = "bind", MS_BIND, 0);
		if ($ret != 0) {
			printf "error bind-mounting '%s' on '%s': %d\n", $dir, $config{'tmp_mount_dir'}, $ret;
			exit 1;
		}
		printf "tmp_mount_dir: '%s'\n", $config{'tmp_mount_dir'} if $config{'verbose'} >= 1;
	}

	my %tree_info;
	my %tmp_tree_info;

	#postprocess =>
	#wanted =>

	my $tptr;

	my %orig_tree;
	my %bind_tree;

	$tptr = scan_filesystem($dir);
	%orig_tree = %{$tptr};

	if ($config{'verbose'} >= 1) {
		printf "tree:\n";
		print Dumper(\%orig_tree);
	}

	if ($config{'do_mount'}) {
		$tptr = scan_filesystem($config{'tmp_mount_dir'});
		%bind_tree = %{$tptr};

		printf "\n";
		if ($config{'verbose'} >= 1) {
			printf "bind tree\n";
			print Dumper(\%bind_tree);
		}
		compare_inode_info(\%orig_tree, \%bind_tree);
		output_overmount_info(\%orig_tree, \%bind_tree);

		my $label_width = max_string_len("apparent size", "allocated");
		my $field_width = max_string_len($dir, sprintf("%d", $orig_tree{'total_size'}));

		printf "%*s  %*s %*s\n", $label_width, "", $field_width, $dir, length("actual    "), "actual";

		my $diff;
		my $diff_str;

		# TODO: (maybe) output $total_overmount_size and $total_overmount_blocks

		$diff = $bind_tree{'total_size'} - $orig_tree{'total_size'};
		$diff_str = ($diff > 0) ? sprintf(" (+%d - %s)", $diff, byte_units($diff, 1024)) :
			($diff < 0) ? sprintf(" (-%d - %s)", -$diff, byte_units(-$diff, 1024)) :
			"";
		printf "%*s: %*d %*d%s\n", $label_width, "apparent size",
			$field_width, $orig_tree{'total_size'},
			length("actual    "), $bind_tree{'total_size'},
			$diff_str;


		$diff = ($bind_tree{'total_blocks'} - $orig_tree{'total_blocks'}) * 512;
		$diff_str = ($diff > 0) ? sprintf(" (+%d - %s)", $diff, byte_units($diff, 1024)) :
			($diff < 0) ? sprintf(" (-%d - %s)", -$diff, byte_units(-$diff, 1024)) :
			"";
		printf "%*s: %*d %*d%s\n", $label_width, "allocated",
			$field_width, $orig_tree{'total_blocks'} * 512,
			length("actual    "), $bind_tree{'total_blocks'} * 512,
			$diff_str;

		my $out;
	}

	if ($config{'do_mount'} && 0) {
#		int umount2(const char *target, int flags);
		$ret = syscall(&SYS_umount2, $config{'tmp_mount_dir'}, 0);
		if ($ret != 0) {
			printf "umount result: $ret\n";
		}
		rmdir($config{'tmp_mount_dir'});
	}
	cleanup() if $config{'do_mount'};
}
